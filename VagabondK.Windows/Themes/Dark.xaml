<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:vk="clr-namespace:VagabondK.Windows"
    xmlns:vkc="clr-namespace:VagabondK.Windows.Converters"
    xmlns:vkm="clr-namespace:VagabondK.Windows.Commands"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
    xmlns:rp="clr-namespace:System.Windows.Controls.Ribbon.Primitives;assembly=System.Windows.Controls.Ribbon"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    mc:Ignorable="d"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008">

    <!-- Main Colors -->

    <Color x:Key="MainColor">#FF595959</Color>
    <Color x:Key="HoverColor">#50000000</Color>
    <Color x:Key="DefaultColor">#FF9BB1C5</Color>
    <SolidColorBrush x:Key="LightBrush" Color="#FF333333" />
    <SolidColorBrush x:Key="ShadeBrush" Color="#FF434343" />

    <Color x:Key="TopGradientSelectColor">#FF444444</Color>
    <Color x:Key="BottomGradientSelectColor">#FF222222</Color>

    <Color x:Key="BlackColor">#FF000000</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>

    <SolidColorBrush x:Key="TextBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="NormalBrush" Color="{StaticResource MainColor}" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#FF222222" />
    <SolidColorBrush x:Key="HoverBrush" Color="{StaticResource HoverColor}" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#FFD1D1D1" />

    <LinearGradientBrush x:Key="PressedBrush" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4C000000" Offset="0" />
        <GradientStop Color="#26FFFFFF" Offset="1" />
        <GradientStop Color="#4C000000" Offset="0.467" />
        <GradientStop Color="#26FFFFFF" Offset="0.479" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="#FF333333" />

    <LinearGradientBrush x:Key="SelectedBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource TopGradientSelectColor}" Offset="0" />
        <GradientStop Color="{StaticResource BottomGradientSelectColor}" Offset="1" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#FFCCCCCC" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#80444444" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FF222222" />

    <!-- EXPRESSION COMMON VALUES -->

    <LinearGradientBrush x:Key="ShineBrush" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#59FFFFFF" Offset="0" />
        <GradientStop Color="#00FFFFFF" Offset="1" />
        <GradientStop Color="#26FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HoverShineBrush" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4CFFFFFF" Offset="0" />
        <GradientStop Color="#26FFFFFF" Offset="1" />
        <GradientStop Color="#26FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
        <GradientStop Color="#00FFFFFF" Offset="0.856" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#444" Offset="0.0" />
        <GradientStop Color="#888" Offset="1.0" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DefaultedBorderBrush" Color="{StaticResource DefaultColor}" />
    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />


    <SolidColorBrush x:Key="{x:Static SystemColors.MenuTextBrushKey}" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.ActiveCaptionTextBrush}" Color="#FFFFFFFF"/>

    <Style x:Key="NuclearButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>

            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>

            </Storyboard>
            <Storyboard x:Key="PressedOn">

                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>

            </Storyboard>
            <Storyboard x:Key="PressedOff">

                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>

            </Storyboard>
            <Storyboard x:Key="FocusedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocussedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

        </ControlTemplate.Resources>
        <Grid>
            <Grid x:Name="Grid">
                <Border x:Name="Background" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
                <Border x:Name="HoverBorder" Opacity="0" Background="{StaticResource HoverBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
                <Border x:Name="HoverShineBorder" Opacity="0" Background="{StaticResource HoverShineBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
                <Border x:Name="PressedBorder" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource PressedBrush}" />
                <Border x:Name="ShineBorder" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource ShineBrush}" Opacity="1" />
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                <Border x:Name="FocusVisualElement" IsHitTestVisible="false" BorderBrush="{StaticResource HoverShineBrush}" BorderThickness="1" CornerRadius="3,3,3,3" Margin="1,1,1,1" Opacity="0" />
            </Grid>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="BorderBrush" TargetName="ShineBorder" Value="{DynamicResource DefaultedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true" />
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="ShineBorder" />-->
                <Setter Property="Opacity" TargetName="Grid" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource ButtonTemplate}" />
    </Style>

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="CheckBoxTemplate" TargetType="{x:Type CheckBox}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedTrue">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedFalse">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="IndeterminateOn">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="IndeterminateOff">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocussedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocussedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <BulletDecorator Background="Transparent" x:Name="bulletDecorator">
            <BulletDecorator.Bullet>
                <Grid Width="16" Height="16">
                    <Rectangle Height="14" Margin="1" x:Name="Background" Width="14" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                    <Rectangle Height="14" Margin="1" x:Name="BackgroundOverlay" Width="14" Opacity="0" Fill="{x:Null}" Stroke="{StaticResource HoverBrush}" StrokeThickness="2" />
                    <Rectangle Height="16" x:Name="PressedRectangle" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverBrush}" StrokeThickness="1" />
                    <Path Height="10" Margin="1,1,0,1.5" x:Name="CheckIcon" Width="10.5" Opacity="0" Fill="White" Stretch="Fill" Data="M102.03442,598.79645 L105.22962,597.78918 L106.78825,600.42358 C106.78825,600.42358 108.51028,595.74304 110.21724,593.60419 C112.00967,591.35822 114.89314,591.42316 114.89314,591.42316 C114.89314,591.42316 112.67844,593.42645 111.93174,594.44464 C110.7449,596.06293 107.15683,604.13837 107.15683,604.13837 z" />
                    <Rectangle Height="8" x:Name="IndeterminateIcon" Width="10" Opacity="0" Fill="White" />
                    <Rectangle Height="14" x:Name="DisabledVisualElement" Width="14" Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" />
                    <Rectangle Height="16" x:Name="ContentFocusVisualElement" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverShineBrush}" StrokeThickness="1" />
                    <Rectangle Height="12" x:Name="ShineRectangle" Width="14" IsHitTestVisible="false" Opacity="1" Stroke="{x:Null}" StrokeThickness="1" Fill="{StaticResource ShineBrush}" Margin="2,2,2,2" />
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" />
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource FocussedOn}" x:Name="FocussedOn_BeginStoryboard" />
                </Trigger.EnterActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsThreeState" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="ThreeStateOn_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}" />
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard x:Name="ThreeStateOff_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}" />
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="IsThreeState" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="ThreeStateOn1_BeginStoryboard" Storyboard="{StaticResource IndeterminateOn}" />
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard x:Name="ThreeStateOff1_BeginStoryboard" Storyboard="{StaticResource IndeterminateOff}" />
                </MultiTrigger.ExitActions>
                <Setter Property="Visibility" TargetName="CheckIcon" Value="Hidden" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CheckedFalse}" x:Name="CheckedTrue_BeginStoryboard" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="CheckedTrue_BeginStoryboard1" Storyboard="{StaticResource CheckedTrue}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background" />
                <Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Background" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter Property="Opacity" TargetName="bulletDecorator" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Template" Value="{DynamicResource CheckBoxTemplate}" />
    </Style>

    <ControlTemplate x:Key="RadioButtonTemplate" TargetType="{x:Type RadioButton}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOn">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOff">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocussedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocussedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentFocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <BulletDecorator Background="Transparent" x:Name="bulletDecorator">
            <BulletDecorator.Bullet>
                <Grid Width="16" Height="16">
                    <Ellipse Height="14" Margin="1" x:Name="Background" Width="14" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                    <Ellipse Height="14" Margin="1" x:Name="BackgroundOverlay" Width="14" StrokeThickness="2" Stroke="{StaticResource HoverBrush}" Opacity="0" />
                    <Ellipse Height="14" Margin="1" x:Name="PressedEllipse" Width="14" StrokeThickness="{TemplateBinding BorderThickness}" Stroke="{StaticResource HoverBrush}" Opacity="0" />
                    <Ellipse Height="6" x:Name="CheckIcon" Width="6" Opacity="0" Fill="White" />
                    <Ellipse Height="14" x:Name="DisabledVisualElement" Width="14" Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" />
                    <Ellipse Height="16" x:Name="ContentFocusVisualElement" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverShineBrush}" StrokeThickness="1" />
                    <Ellipse Height="12" Margin="2,2,2,2" x:Name="ShineEllipse" Width="12" StrokeThickness="{TemplateBinding BorderThickness}" Stroke="{x:Null}" Fill="{StaticResource ShineBrush}" />
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" />
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource FocussedOn}" x:Name="FocussedOn_BeginStoryboard" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">

                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOn}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOff}" />
                </Trigger.ExitActions>

            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">

                <Trigger.ExitActions>
                    <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                </Trigger.EnterActions>

            </Trigger>
            <Trigger Property="IsPressed" Value="true">

                <Trigger.ExitActions>
                    <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
                </Trigger.EnterActions>

            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter Property="Stroke" TargetName="Background" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter Property="Opacity" TargetName="bulletDecorator" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Template" Value="{DynamicResource RadioButtonTemplate}" />
        <Style.Triggers>
        </Style.Triggers>
    </Style>


    <Style d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.8"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Opacity="1" />
                        <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Opacity="0.3" Height="Auto" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true" />
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="ContentPresenter" Value="0.1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.8"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.3"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="0,0,0,0" x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" x:Name="HoverRectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="4" Stroke="{x:Null}" Margin="4.5,-2,4.5,-2" Opacity="0.3" MinHeight="10">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle HorizontalAlignment="Stretch" x:Name="PressedRectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="4" Stroke="{x:Null}" Margin="4.5,-2,4.5,-2" Opacity="0.3" MinHeight="10">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False" >
                            <Setter Property="Opacity" TargetName="Grid" Value="0.1"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{DynamicResource NormalBrush}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="DecreaseRepeat" Command="ScrollBar.LineUpCommand" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="{x:Null}">
                            <Grid Margin="0,0,0,0">
                                <Path Margin="4.742,3.997,4.946,5.327" VerticalAlignment="Stretch" Height="Auto" Fill="{DynamicResource GlyphBrush}" Stretch="Fill" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1" Data="M5.2422477,11.132184 L11.5544,11.132184 8.6412958,4.4969033 z" x:Name="DecreaseArrow" />
                            </Grid>
                        </RepeatButton>
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource NuclearThumbStyle}" Background="{x:Null}" Foreground="{x:Null}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Command="ScrollBar.LineDownCommand">
                            <Grid>
                                <Path Margin="4.742,3.997,4.946,5.327" x:Name="IncreaseArrow" VerticalAlignment="Stretch" Height="Auto" Fill="{DynamicResource GlyphBrush}" Stretch="Fill" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1" Data="M5.2422477,11.132184 L11.5544,11.132184 8.6412958,4.4969033 z" RenderTransformOrigin="0.5,0.5">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="180" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0" />
                    <GradientStop Color="#FF8399A9" Offset="0.375" />
                    <GradientStop Color="#FF718597" Offset="0.375" />
                    <GradientStop Color="#FF617584" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Background="{TemplateBinding Background}" />
                        <ScrollViewer Margin="1" Style="{DynamicResource NuclearScrollViewer}" Focusable="false" Background="{x:Null}">
                            <StackPanel Margin="1,1,1,1" IsItemsHost="true" />
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style d:IsControlPart="True" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="#80000000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="FocussedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid SnapsToDevicePixels="true" Margin="1,1,1,1" Background="Transparent">
                        <Rectangle x:Name="Background" IsHitTestVisible="False" Fill="{TemplateBinding Background}" RadiusX="1" RadiusY="1"/>
                        <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource HoverShineBrush}" RadiusX="1" RadiusY="1"/>
                        <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource HoverShineBrush}" RadiusX="1" RadiusY="1"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="5,2,0,2" x:Name="contentPresenter" />
                        <Rectangle x:Name="FocusVisualElement" Stroke="{StaticResource NormalBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource FocussedOff}" x:Name="FocussedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FocussedOn}" x:Name="FocussedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">

                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>

                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                            </MultiTrigger.ExitActions>

                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <!--<Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle SnapsToDevicePixels="true" Margin="0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                        <Grid SnapsToDevicePixels="False" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                            <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                            <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                            <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                            <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                            <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                            <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
                            <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
                        <Grid SnapsToDevicePixels="False" Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                                <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
                            </Grid>
                            <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="2,4,4,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
                                <ContentPresenter.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Padding="{TemplateBinding Padding}" CornerRadius="2,2,2,2" BorderThickness="1,1,1,1" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
                        <Grid SnapsToDevicePixels="False" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                                <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
                            </Grid>
                            <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Padding="{TemplateBinding Padding}" CornerRadius="2,2,2,2" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1">
                        <Grid SnapsToDevicePixels="False" Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle Margin="2,2,2,2" x:Name="Rectangle" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                <Rectangle Margin="2,2,2,2" x:Name="ShineRectangle" Fill="{DynamicResource ShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                                <Rectangle Margin="2,2,2,2" x:Name="HoverRectangle" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Rectangle Margin="2,2,2,2" x:Name="HoverShineRectangle" Fill="{DynamicResource HoverShineBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Rectangle Margin="2,2,2,2" x:Name="PressedRectangle" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Opacity="0" />
                                <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" />
                                <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" />
                            </Grid>
                            <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="4,4,2,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
                                <ContentPresenter.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3">
                        <DockPanel x:Name="dockPanel">
                            <ToggleButton FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1,1,1,0" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" />
                            <Border Visibility="Collapsed" Background="{DynamicResource ShadeBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="3,3,3,3" x:Name="border" Margin="1,1,1,1">
                                <ContentPresenter Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,1,1" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Bottom" />
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="border" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Down" />
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid x:Name="grid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="3" Fill="{DynamicResource LightBrush}" Stroke="{DynamicResource NormalBorderBrush}" />
            <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="3" Fill="{DynamicResource LightBrush}" Stroke="{DynamicResource NormalBorderBrush}" />
            <Border Margin="2,2,2,2" Grid.Column="1" Background="{DynamicResource NormalBrush}" CornerRadius="3,3,3,3" x:Name="border" />
            <Border Margin="2,2,2,2" Background="{DynamicResource HoverBrush}" CornerRadius="3,3,3,3" x:Name="HoverBorder" Grid.Column="1" Opacity="0" />
            <Border Margin="2,2,2,2" Background="{DynamicResource HoverShineBrush}" CornerRadius="3,3,3,3" x:Name="HoverShineBorder" Grid.Column="1" Opacity="0" />
            <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{x:Null}" Data="M0.5,0.5 L3,6.5 5.5,0.5" Stroke="{DynamicResource GlyphBrush}" Margin="5,0,5,0" Height="7" StrokeThickness="2" Stretch="Fill" />
            <Border Margin="2,2,2,2" Background="{DynamicResource ShineBrush}" CornerRadius="3,3,3,3" x:Name="ShineBorder" Grid.Column="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsChecked" Value="true" />
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource DisabledForegroundBrush}"/>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource DisabledBorderBrush}"/>
                <Setter Property="Opacity" TargetName="grid" Value="0.8"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        <ControlTemplate.Triggers>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="grid">
            <ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />
            <ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="{DynamicResource LightBrush}" IsReadOnly="{TemplateBinding IsReadOnly}" BorderBrush="{DynamicResource NormalBorderBrush}" Foreground="{DynamicResource TextBrush}" />
            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                    <Border x:Name="DropDownBorder" Background="{DynamicResource ControlBackgroundBrush}" CornerRadius="3,3,3,3" />
                    <ScrollViewer Margin="4,6,4,6" Style="{DynamicResource NuclearScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True" Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter Property="Opacity" TargetName="grid" Value="0.5" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox" />
                <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
    </Style>


    <Style d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>

                    </ControlTemplate.Resources>
                    <Grid SnapsToDevicePixels="true" Margin="1,1,1,1" Background="Transparent">
                        <Rectangle x:Name="Background" IsHitTestVisible="False" Opacity="0.25" Fill="{StaticResource NormalBrush}" RadiusX="1" RadiusY="1" />
                        <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}" RadiusX="1" RadiusY="1" />
                        <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource SelectedBackgroundBrush}" RadiusX="1" RadiusY="1" />
                        <ContentPresenter Margin="5,2,0,2" x:Name="contentPresenter" VerticalAlignment="Center" />
                        <Rectangle x:Name="FocusVisualElement" Visibility="Collapsed" Stroke="{StaticResource HoverShineBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ValueChangedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="IndeterminateOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateGradientFill" Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.Transform).(TransformGroup.Children)[0].X" RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                <SplineDoubleKeyFrame KeyTime="00:00:0.5" Value="25" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="PART_Track" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="0,0,0,0" Background="{DynamicResource LightBrush}">
                            <Border.BitmapEffect>
                                <OuterGlowBitmapEffect Opacity="0" GlowColor="{DynamicResource WhiteColor}" GlowSize="3" />
                            </Border.BitmapEffect>
                        </Border>
                        <Border HorizontalAlignment="Left" x:Name="PART_Indicator">
                            <Border BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1" CornerRadius="0,0,0,0" Margin="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                        <GradientStop Color="#B2FFFFFF" Offset="0" />
                                        <GradientStop Color="#C6FFFFFF" Offset="0.15" />
                                        <GradientStop Color="#D1FFFFFF" Offset="0.275" />
                                        <GradientStop Color="#C6FFFFFF" Offset="0.4" />
                                        <GradientStop Color="#BFFFFFFF" Offset="0.65" />
                                        <GradientStop Color="#A5FFFFFF" Offset="0.75" />
                                        <GradientStop Color="#91FFFFFF" Offset="0.85" />
                                        <GradientStop Color="#72FFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Border>
                        <Grid x:Name="IndeterminateRoot" Visibility="Collapsed">
                            <Rectangle Margin="{TemplateBinding BorderThickness}" x:Name="IndeterminateSolidFill" Opacity="1" RenderTransformOrigin="0.5,0.5" RadiusX="2" RadiusY="2" Fill="{DynamicResource ControlBackgroundBrush}" Stroke="#FF448DCA" StrokeThickness="0" />
                            <Rectangle Margin="{TemplateBinding BorderThickness}" x:Name="IndeterminateGradientFill" RadiusX="2" RadiusY="2" StrokeThickness="1">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="5,10" StartPoint="0,0" SpreadMethod="Repeat" MappingMode="Absolute">
                                        <LinearGradientBrush.Transform>
                                            <TransformGroup>
                                                <TranslateTransform X="0" />
                                            </TransformGroup>
                                        </LinearGradientBrush.Transform>
                                        <GradientStop Color="#00FEFEFE" Offset="0.5" />
                                        <GradientStop Color="#FEA1A1A1" Offset="0.5" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <Border Background="{DynamicResource DisabledBackgroundBrush}" Opacity="0" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource DisabledBorderBrush}" x:Name="border"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.8"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="RangeBase.ValueChanged">
                            <BeginStoryboard Storyboard="{StaticResource ValueChangedOn}" />
                        </EventTrigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IndeterminateOn}" />
                            </Trigger.EnterActions>
                            <Setter Property="Visibility" TargetName="IndeterminateRoot" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="Enabled">
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame  KeyTime="0" Value="{x:Static Visibility.Visible}" />
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="Disabled">
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Collapsed}" />
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
            <Border x:Name="Border" Opacity="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" Background="{TemplateBinding Background}">
                <Grid>
                    <Border BorderThickness="1">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource NuclearScrollViewer}" />
                    </Border>
                </Grid>
            </Border>
            <Border x:Name="HoverBorder" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource GlyphBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />
            <Border x:Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderBrush="#FFFF7100" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />


        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard" />
                </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
                </MultiTrigger.ExitActions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                </MultiTrigger.EnterActions>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>

            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource Enabled}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource Disabled}" />
                </Trigger.EnterActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template" Value="{DynamicResource TextBoxTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="#FF808080"/>
    </Style>


    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Enabled">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame  KeyTime="0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Disabled">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" Opacity="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" Background="{TemplateBinding Background}">
                            <Grid>
                                <Border BorderThickness="1">
                                    <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource NuclearScrollViewer}" />
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBorder" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource GlyphBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />
                        <Border x:Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderBrush="#FFFF7100" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Enabled}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Disabled}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="#FF808080"/>
    </Style>

    <Style TargetType="{x:Type RichTextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RichTextBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Border" Opacity="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" Background="{TemplateBinding Background}">
                            <Grid>
                                <Border BorderThickness="1">
                                    <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource NuclearScrollViewer}" />
                                </Border>
                            </Grid>
                        </Border>
                        <Border x:Name="HoverBorder" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource GlyphBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />
                        <Border x:Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource HoverShineBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,2,2" />


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="#FF000000"/>
    </Style>
    <Style TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border Margin="1" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <StackPanel Background="{TemplateBinding Background}" IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15" />
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HighlightedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HightlightedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" Margin="3,2,3,2">
                        <Grid Margin="0,0,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Grid.ColumnSpan="4" Background="{DynamicResource HoverBrush}" Opacity="0" x:Name="HoverBorder" CornerRadius="1,1,1,1"/>
                            <Border Grid.ColumnSpan="4" Background="{DynamicResource HoverShineBrush}" Opacity="0" x:Name="HoverShineBorder" CornerRadius="1,1,1,1"/>
                            <ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />
                            <Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight" />
                            </Grid>
                            <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" Margin="2,1,2,1" />
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z" />
                            </Grid>
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder" Background="{DynamicResource LightBrush}" BorderThickness="1" Opacity="0.8">
                                        <Border.BorderBrush>
                                            <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                                        </Border.BorderBrush>
                                    </Border>
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup" />
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                            <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu" />
                            <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu" />
                            <Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HightlightedOff}" x:Name="HightlightedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HighlightedOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" x:Name="RowDefinition0" />
                            <RowDefinition Height="*" x:Name="RowDefinition1" />
                        </Grid.RowDefinitions>
                        <Border CornerRadius="2,2,0,0" Background="{DynamicResource LightBrush}" x:Name="border">
                            <TabPanel x:Name="HeaderPanel" IsItemsHost="true" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1" RenderTransformOrigin="0.5,0.5" Width="Auto" Height="Auto">
                                <TabPanel.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.LayoutTransform>
                                <TabPanel.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.RenderTransform>

                            </TabPanel>
                        </Border>
                        <Border x:Name="ContentPanel" Grid.Column="0" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Background="{DynamicResource ShadeBrush}" CornerRadius="0,0,2,2">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />
                        </Border>
                        <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderThickness="0,0,0,1" CornerRadius="10,0,0,0" Opacity="0.5" Margin="2,0,2,0" x:Name="border1">
                            <Border.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Border.LayoutTransform>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
                            </Border.BorderBrush>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Grid.Row" TargetName="border" Value="1"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,2,0,0"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="0,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">

                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="border" Value="0"/>
                            <Setter Property="Margin" TargetName="border" Value="0,0,0,0"/>
                            <Setter Property="Margin" TargetName="ContentPanel" Value="0,0,0,0"/>
                            <Setter Property="LayoutTransform" TargetName="border1">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin" TargetName="border1" Value="0,0,0,0"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="0,2,2,0"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="0,2,2,0"/>

                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="border" Value="1"/>
                            <Setter Property="LayoutTransform" TargetName="border1">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Grid.Column" TargetName="border1" Value="1"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,0,0,2"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="0,2,2,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style d:IsControlPart="True" TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid" Margin="2,1,2,3">
                        <Grid.LayoutTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="0"/>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </Grid.LayoutTransform>
                        <Border x:Name="border" BorderBrush="{x:Null}" CornerRadius="2,2,2,2" Opacity="0.5">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,0.976" StartPoint="0.5,0.039">
                                    <GradientStop Color="#7F595959" Offset="0" />
                                    <GradientStop Color="#19FFFFFF" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="SelectedBorder" BorderBrush="{x:Null}" CornerRadius="2,2,2,2" Opacity="0" Background="{DynamicResource SelectedBackgroundBrush}"/>
                        <Border x:Name="HoverBorder" BorderBrush="{x:Null}" CornerRadius="2,2,2,2" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,0.976" StartPoint="0.5,0.039">
                                    <GradientStop Color="#7F595959" Offset="0" />
                                    <GradientStop Color="#19FFFFFF" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Grid>
                            <ContentPresenter x:Name="ContentSite" RecognizesAccessKey="True" ContentSource="Header" d:LayoutOverrides="Width, Height" HorizontalAlignment="Center" Margin="6,1,6,1" VerticalAlignment="Center" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="-90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="180" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                            <Setter Property="Panel.ZIndex" Value="100" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="grid" />
                                <Condition Property="Selector.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter Property="Opacity" TargetName="border" Value="0.9" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="Opacity" TargetName="grid" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground" >
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="NuclearSliderThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="PressedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="PressedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
                        <Border x:Name="HoverBorder" Opacity="0" Background="{StaticResource HoverBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
                        <Border x:Name="HoverShineBorder" Opacity="0" Background="{StaticResource HoverShineBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" />
                        <Border x:Name="PressedBorder" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource PressedBrush}" />
                        <Border x:Name="ShineBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" Background="{StaticResource ShineBrush}" Opacity="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
    </Style>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" />
                        <Border Grid.Row="1" Margin="0" x:Name="Border" Height="4" CornerRadius="2" Background="{DynamicResource LightBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" />
                        <Track Grid.Row="1" x:Name="PART_Track">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource NuclearSliderThumb}" Background="{DynamicResource NormalBrush}" Foreground="{x:Null}" Width="20" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick" />
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="3,3,3,3">
                            <ScrollViewer Style="{DynamicResource NuclearScrollViewer}" Focusable="False" Padding="4" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="False" Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearTreeViewItemToggleButton" d:IsControlPart="True" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Width="15" Height="13">
                        <Path Visibility="Collapsed" HorizontalAlignment="Left" Margin="1,1,1,1" x:Name="IsExpandedPath" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 8 4 L 4 8 Z" />
                        <Path HorizontalAlignment="Left" Margin="1,1,1,1" x:Name="ExpandPath" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 4 0 L 8 4 L 4 8 Z" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="IsExpandedPath" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ExpandPath" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectionBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectionBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource NuclearTreeViewItemToggleButton}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Background="{x:Null}" BorderBrush="{x:Null}" Foreground="{x:Null}" />
                        <Border Grid.Column="1" x:Name="Selection_Border" BorderThickness="1,1,1,1" CornerRadius="3,3,3,3">
                            <Grid Width="Auto" Height="Auto">
                                <Border x:Name="MainBorder" Opacity="0.25" Background="{DynamicResource NormalBrush}" CornerRadius="2,2,2,2"/>
                                <Border x:Name="SelectionBorder" Opacity="0" Background="{DynamicResource SelectedBackgroundBrush}" CornerRadius="2,2,2,2"/>
                                <Border x:Name="HoverBorder" Opacity="0" Background="{DynamicResource NormalBrush}" CornerRadius="2,2,2,2"/>
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" d:LayoutOverrides="Width" Height="Auto" Margin="2,0,2,0" />
                            </Grid>
                        </Border>
                        <ItemsPresenter Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1" x:Name="ItemsHost" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOn_BeginStoryboard1"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            <Setter Property="Background" TargetName="Selection_Border" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter Property="Opacity" TargetName="Selection_Border" Value="0.5" />
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="{DynamicResource NormalBorderBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" SourceName="Selection_Border" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsMouseOver" Value="true" SourceName="Selection_Border" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Selection_Border" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter Property="Opacity" TargetName="Selection_Border" Value="0.8" />
                            <Setter Property="BorderBrush" TargetName="Selection_Border" Value="{DynamicResource NormalBorderBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Margin="2" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0" />
        <GradientStop Color="#EBEBEB" Offset="0.5" />
        <GradientStop Color="#DDDDDD" Offset="0.5" />
        <GradientStop Color="#CDCDCD" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid">

                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" />
                        <Border x:Name="CheckedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource SelectedBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" />
                        <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource HoverBrush}" />
                        <Border x:Name="HoverShineBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource HoverShineBrush}" />
                        <Border x:Name="Pressed" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource PressedBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" Background="{DynamicResource PressedBrush}" />
                        <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                    <GradientStop Color="#26FFFFFF" Offset="0" />
                                    <GradientStop Color="#00FFFFFF" Offset="1" />
                                    <GradientStop Color="#26FFFFFF" Offset="0.467" />
                                    <GradientStop Color="#00FFFFFF" Offset="0.475" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>

                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedOff}" x:Name="CheckedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedOn}" x:Name="CheckedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
                            <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#D5DFE5" />
        <Setter Property="Background" Value="{StaticResource LightBrush}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true" UseLayoutRounding="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="3" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="3" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="3" />
                        </Grid.RowDefinitions>
                        <Border Grid.ColumnSpan="3" Grid.RowSpan="4" Background="{TemplateBinding Background}" CornerRadius="4,4,4,4" BorderThickness="1,1,1,1" SnapsToDevicePixels="true" UseLayoutRounding="True" />
                        <Border Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="4" BorderBrush="{DynamicResource NormalBorderBrush}" SnapsToDevicePixels="true" UseLayoutRounding="True">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true" UseLayoutRounding="True">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource MainColor}" />
                                </Border.BorderBrush>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" SnapsToDevicePixels="true" UseLayoutRounding="True">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource MainColor}" />
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                        </Border>
                        <!--<Border Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" />-->
                        <Border Grid.ColumnSpan="3" Grid.RowSpan="2" Background="{DynamicResource NormalBrush}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" x:Name="Main" BorderBrush="{DynamicResource NormalBorderBrush}" SnapsToDevicePixels="true" UseLayoutRounding="True" />
                        <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="1.5" RadiusY="1.5" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine" Grid.ColumnSpan="3" Grid.RowSpan="2" Margin="1,1,1,1">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                    <GradientStop Color="#26FFFFFF" Offset="0" />
                                    <GradientStop Color="#00FFFFFF" Offset="1" />
                                    <GradientStop Color="#26FFFFFF" Offset="0.467" />
                                    <GradientStop Color="#00FFFFFF" Offset="0.475" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>

                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Margin="3,0" Grid.RowSpan="2" Padding="3,1,3,0" SnapsToDevicePixels="true" UseLayoutRounding="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True" Margin="0,4,0,4" />
                        </Border>

                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ListBorder" Color="#828790" />
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer Focusable="false" DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                                <GridViewHeaderRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,0,2,0" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" />

                            </ScrollViewer>
                            <ScrollContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ScrollContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" KeyboardNavigation.DirectionalNavigation="Local" />
                        </DockPanel>
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_HorizontalScrollBar" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_VerticalScrollBar" Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <DockPanel Grid.Column="1" Grid.Row="1" Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}" LastChildFill="false">
                            <Rectangle Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Width="1" Fill="White" DockPanel.Dock="Left" />
                            <Rectangle Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Height="1" Fill="White" DockPanel.Dock="Top" />
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#FF042271" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" BorderBrush="{DynamicResource DefaultedBorderBrush}" Background="{DynamicResource ControlBackgroundBrush}">

                        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="#8E6EA6F5" StrokeThickness="1" RadiusX="2" RadiusY="2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="HoverOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="FocussedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocussedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" x:Name="border">

                        <Grid Margin="2,0,2,0">
                            <Rectangle x:Name="Background" IsHitTestVisible="False" Opacity="0.25" Fill="{StaticResource NormalBrush}" RadiusX="1" RadiusY="1"/>
                            <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}" RadiusX="1" RadiusY="1"/>
                            <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource SelectedBackgroundBrush}" RadiusX="1" RadiusY="1"/>
                            <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,2,0,2" VerticalAlignment="Stretch" />
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>

                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter Property="Fill" TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>


                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-8.5" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Padding" Value="0,3,0,4" />
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Rectangle HorizontalAlignment="Center" Width="0.5">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="0,1,0,1">
                        <Grid>

                            <Border x:Name="Main" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" />
                            <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="0" RadiusY="0" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine" Fill="{DynamicResource ShineBrush}"/>
                            <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource HoverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" Opacity="0" />
                            <Border x:Name="HoverShineBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource HoverShineBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" Opacity="0" />
                            <Border x:Name="PressedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" CornerRadius="0,0,0,0" Opacity="0" />

                            <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                </Border.BorderBrush>
                                <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" Margin="2,2,2,2" />
                            </Border>
                        </Grid>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}" Margin="0,0,7,0" Width="Auto" HorizontalAlignment="Stretch" />
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="20" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="Role" Value="Padding">
                            <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="Floating">
                            <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Background" Value="Yellow" />
                            <Setter Property="Foreground" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource ButtonTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="MinHeight" Value="18"/>
        <Setter Property="MinWidth" Value="50"/>
    </Style>

    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource CheckBoxTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource RadioButtonTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TopGradientSelectColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template" Value="{DynamicResource TextBoxTemplate}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="#FF000000"/>
    </Style>


    <LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFFFFF" Offset="0"/>
        <GradientStop Color="#FFFBFF" Offset="0.5"/>
        <GradientStop Color="#F7F7F7" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECECEC" Offset="0"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#A0A0A0" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ToolBarButtonHover" Color="{StaticResource MainColor}" />
    <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>
    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border SnapsToDevicePixels="true" x:Name="Bd" CornerRadius="0,0,0,0" Background="{DynamicResource LightBrush}">
                        <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom" Width="6" Height="7">
                            <Path Stroke="White" Data="M 1 1.5 L 6 1.5"/>
                            <Path Stroke="{TemplateBinding Foreground}" Data="M 0 0.5 L 5 0.5"/>
                            <Path Fill="White" Data="M 0.5 4 L 6.5 4 L 3.5 7 Z"/>
                            <Path Fill="{TemplateBinding Foreground}" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource MouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFFDFDFD"/>
    <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFFFFFFF"/>
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border SnapsToDevicePixels="True" Background="Transparent" Padding="{TemplateBinding Padding}" CornerRadius="0,0,0,0">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" ViewboxUnits="Absolute" Viewport="0,0,4,4" ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                                            <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#ECECEC" Offset="0"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#A0A0A0" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border SnapsToDevicePixels="true" x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,0,3,3">
                        <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="2,7,2,2" VerticalAlignment="Bottom" Width="7" Height="6">
                            <Path Stroke="White" Data="M 1.5 1 L 1.5 6"/>
                            <Path Stroke="{TemplateBinding Foreground}" Data="M 0.5 0 L 0.5 5"/>
                            <Path Fill="White" Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z"/>
                            <Path Fill="{TemplateBinding Foreground}" Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#FFFFFF" Offset="0"/>
        <GradientStop Color="#FFFBFF" Offset="0.5"/>
        <GradientStop Color="#F7F7F7" Offset="1"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{StaticResource ToolBarHorizontalBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid SnapsToDevicePixels="true" Margin="3,1,1,1" x:Name="Grid">
                        <Grid HorizontalAlignment="Right" x:Name="OverflowGrid">
                            <ToggleButton IsEnabled="{TemplateBinding HasOverflowItems}" FocusVisualStyle="{x:Null}" x:Name="OverflowButton" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" ClickMode="Press" IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Popup Focusable="false" AllowsTransparency="true" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" StaysOpen="False" x:Name="OverflowPopup">
                                <Border x:Name="Shdw">
                                    <Border BorderThickness="1,1,1,1" Background="{DynamicResource LightBrush}" BorderBrush="{DynamicResource LightBrush}">
                                        <ToolBarOverflowPanel Focusable="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FocusVisualStyle="{x:Null}" Margin="2" x:Name="PART_ToolBarOverflowPanel" WrapWidth="200" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                                    </Border>
                                </Border>
                            </Popup>
                        </Grid>
                        <Border Margin="0,0,11,0" x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBorderBrush}">
                            <Grid>

                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Thumb Padding="6,5,1,6" Margin="-3,-1,0,0" x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" Margin="4,0,4,0" x:Name="ToolBarHeader" VerticalAlignment="Center" ContentSource="Header"/>
                                    <ToolBarPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,1,2,2" x:Name="PART_ToolBarPanel" IsItemsHost="true" Background="{DynamicResource NormalBrush}"/>
                                </DockPanel>
                                <Rectangle IsHitTestVisible="False" Opacity="0.15" VerticalAlignment="Top" Height="13.995" Grid.ColumnSpan="1" Margin="0,0,2,0">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                            <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true"/>
                            <Setter Property="Background" TargetName="Shdw" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                            <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                            <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                            <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                            <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
                            <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
                            <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                            <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                            <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                            <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                            <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                            <Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>



    <Style TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <ControlTemplate x:Key="ThemeWindowButtonTemplate" TargetType="{x:Type Button}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
            <Grid x:Name="Grid">
                <Border x:Name="Background" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" />
                <Border x:Name="HoverBorder" Opacity="0" Background="{TemplateBinding Foreground}" BorderThickness="{TemplateBinding BorderThickness}" />
                <Border x:Name="HoverShineBorder" Opacity="0" Background="{StaticResource HoverShineBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                <Border x:Name="PressedBorder" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource PressedBrush}" />
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
            </Grid>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true" />
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}" TargetName="Background" />
                <Setter Property="Opacity" TargetName="Grid" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ThemeWindowButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#33808080"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template" Value="{StaticResource ThemeWindowButtonTemplate}" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="44"/>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
    </Style>

    <ControlTemplate x:Key="ThemeWindowCloseButtonTemplate" TargetType="{x:Type Button}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverShineBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
            <Grid x:Name="Grid">
                <Border x:Name="Background" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,4,0,0" />
                <Border x:Name="HoverBorder" Opacity="0" Background="{TemplateBinding Foreground}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,4,0,0" />
                <Border x:Name="HoverShineBorder" Opacity="0" Background="{StaticResource HoverShineBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,4,0,0" />
                <Border x:Name="PressedBorder" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource PressedBrush}" CornerRadius="0,4,0,0" />
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
            </Grid>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true" />
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}" TargetName="Background" />
                <Setter Property="Opacity" TargetName="Grid" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type vk:ThemeWindow}">
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="MinWidth" Value="142"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="5" CaptionHeight="24" CornerRadius="5" GlassFrameThickness="1" UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="ClientBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#DD000000" Offset="0"/>
                    <GradientStop Color="#DD333333" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type vk:ThemeWindow}">
                    <Grid ClipToBounds="True">
                        <Grid x:Name="WindowFrame" SnapsToDevicePixels="true" UseLayoutRounding="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <Border BorderBrush="{StaticResource NormalBorderBrush}" Background="{StaticResource NormalBrush}" BorderThickness="1,1,1,0" CornerRadius="4.5,4.5,0,0" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                <Border CornerRadius="4,4,0,0" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                            <GradientStop Color="#26FFFFFF" Offset="0" />
                                            <GradientStop Color="#26FFFFFF" Offset="0.447" />
                                            <GradientStop Color="#00FFFFFF" Offset="0.455" />
                                            <GradientStop Color="#00FFFFFF" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Grid Height="28">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Canvas Margin="3" Height="{Binding ElementName=TitlePanel, Path=ActualHeight}" VerticalAlignment="Center">
                                            <Grid x:Name="TitlePanel" Width="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Image Source="{TemplateBinding Icon}" MaxWidth="16" MaxHeight="16" Margin="3"/>
                                                <TextBlock Grid.Column="1" Foreground="{StaticResource TextBrush}" Text="{TemplateBinding Title}" Margin="2,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" TextTrimming="CharacterEllipsis"/>
                                            </Grid>
                                        </Canvas>
                                        <StackPanel Grid.Column="1" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Button x:Name="MinimizeButton" Focusable="False" Style="{StaticResource ThemeWindowButton}">
                                                <Button.Command>
                                                    <vkm:MinimizeWindowCommand/>
                                                </Button.Command>
                                                <Border x:Name="MinimizeButtonContent" Width="10" Height="10">
                                                    <Rectangle Width="10" Height="2" Fill="{StaticResource TextBrush}" VerticalAlignment="Bottom"/>
                                                </Border>
                                            </Button>
                                            <Button x:Name="MaximizeButton" Focusable="False" Style="{StaticResource ThemeWindowButton}">
                                                <Button.Command>
                                                    <vkm:ToggleMaximizeWindowCommand/>
                                                </Button.Command>
                                                <Grid x:Name="MaximizeButtonContent" Width="12" Height="12">
                                                    <Border x:Name="MaximizeWindowIcon" Width="12" Height="10" BorderThickness="1,3,1,1" BorderBrush="{StaticResource TextBrush}"/>
                                                    <Grid x:Name="NormalWindowIcon" Visibility="Collapsed" Width="12" Height="10">
                                                        <Rectangle Width="10" Height="8" Stroke="{StaticResource TextBrush}" StrokeThickness="1" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                                                        <Path Width="10" Height="8" Stroke="{StaticResource TextBrush}" StrokeThickness="1" HorizontalAlignment="Right" VerticalAlignment="Top" Data="F1 M 0.5,2.5L 0.5,0.5L 9.5,0.5L 9.5,7.5L 7.5,7.5"/>
                                                    </Grid>
                                                </Grid>
                                            </Button>
                                            <Button x:Name="CloseButton" Foreground="#80FF0000" Focusable="False" Style="{StaticResource ThemeWindowButton}" Template="{StaticResource ThemeWindowCloseButtonTemplate}">
                                                <Button.Command>
                                                    <vkm:CloseWindowCommand/>
                                                </Button.Command>
                                                <Path x:Name="CloseButtonContent" Margin="1" Stretch="Fill" Width="10" Height="10" Fill="{StaticResource TextBrush}" Data="F1 M 6,4.64204L 2.35797,1L 1,2.35797L 4.64203,6L 1,9.64203L 2.35796,11L 6,7.35796L 9.64204,11L 11,9.64203L 7.35797,6L 11,2.35796L 9.64204,1L 6,4.64204 Z "/>
                                            </Button>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                            </Border>

                            <Border Grid.Row="1" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,4.5,4.5" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                <Border BorderThickness="3,0,3,3" CornerRadius="0,0,2.5,2.5" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{StaticResource MainColor}" />
                                    </Border.BorderBrush>
                                    <Border BorderBrush="{StaticResource NormalBorderBrush}" Background="{TemplateBinding ClientBackground}" BorderThickness="1" CornerRadius="0,0,0.5,0.5" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="2" ClipToBounds="True"/>
                                    </Border>
                                </Border>
                            </Border>

                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="WindowFrame" Property="Margin" Value="-4,-1,-4,-4"/>
                            <Setter TargetName="CloseButton" Property="Width" Value="47"/>
                            <Setter TargetName="CloseButton" Property="Padding" Value="0,0,3,0"/>
                            <Setter TargetName="MaximizeWindowIcon" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="NormalWindowIcon" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MinimizeButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="TitlePanel" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="MinimizeButtonContent" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="MaximizeButtonContent" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="CloseButtonContent" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <Style TargetType="{x:Type UserControl}">
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
    </Style>

    <ControlTemplate x:Key="ThemeMessageBoxContentControlTemplate" TargetType="{x:Type vk:ThemeMessageBoxContentControl}">
        <StackPanel Margin="3">
            <FrameworkElement.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Padding" Value="20,6"/>
                    <Setter Property="Margin" Value="1"/>
                </Style>
                <vkc:SwitchCaseConverter x:Key="ThemeMessageBoxIconConverter">
                    <vkc:SwitchCaseConverterItem>
                        <vkc:SwitchCaseConverterItem.Case>
                            <MessageBoxImage>Information</MessageBoxImage>
                        </vkc:SwitchCaseConverterItem.Case>
                        <vkc:SwitchCaseConverterItem.Value>
                            <ControlTemplate>
                                <Canvas Width="32" Height="32" Margin="6">
                                    <Ellipse Width="32" Height="32" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF808080" Fill="#FFFFFFFF"/>
                                    <Ellipse Width="28" Height="28" Canvas.Left="2" Canvas.Top="2" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF808080">
                                        <Ellipse.Fill>
                                            <RadialGradientBrush RadiusX="1.78893" RadiusY="1.78893" Center="0.760031,1.24074" GradientOrigin="0.760031,1.24074">
                                                <RadialGradientBrush.GradientStops>
                                                    <GradientStop Color="#FF6E8BFF" Offset="0.0905172"/>
                                                    <GradientStop Color="#FF223FB3" Offset="0.491379"/>
                                                    <GradientStop Color="#FF426AD0" Offset="0.49569"/>
                                                    <GradientStop Color="#FFD3E0FF" Offset="0.797414"/>
                                                </RadialGradientBrush.GradientStops>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <RotateTransform CenterX="0.760031" CenterY="1.24074" Angle="242.904"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                            </RadialGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                    <Path Width="32" Height="32" Stretch="None" Fill="#FFFFFFFF" Data="F1 M 15,12L 17,12C 17.5523,12 18,12.4477 18,13L 18,25C 18,25.5523 17.5523,26 17,26L 15,26C 14.4477,26 14,25.5523 14,25L 14,13C 14,12.4477 14.4477,12 15,12 Z M 16,5.5C 17.3807,5.5 18.5,6.61929 18.5,8C 18.5,9.38072 17.3807,10.5 16,10.5C 14.6193,10.5 13.5,9.38072 13.5,8C 13.5,6.61929 14.6193,5.5 16,5.5 Z "/>
                                </Canvas>
                            </ControlTemplate>
                        </vkc:SwitchCaseConverterItem.Value>
                    </vkc:SwitchCaseConverterItem>
                    <vkc:SwitchCaseConverterItem>
                        <vkc:SwitchCaseConverterItem.Case>
                            <MessageBoxImage>Hand</MessageBoxImage>
                        </vkc:SwitchCaseConverterItem.Case>
                        <vkc:SwitchCaseConverterItem.Value>
                            <ControlTemplate>
                                <Canvas Width="32" Height="32" Margin="6">
                                    <Ellipse Width="32" Height="32" Canvas.Left="-1.63913e-006" Canvas.Top="1.90735e-006" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF808080" Fill="#FFFFFFFF"/>
                                    <Ellipse Width="28" Height="28" Canvas.Left="2" Canvas.Top="2" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF808080">
                                        <Ellipse.Fill>
                                            <RadialGradientBrush RadiusX="1.78893" RadiusY="1.78893" Center="0.760031,1.24074" GradientOrigin="0.760031,1.24074">
                                                <RadialGradientBrush.GradientStops>
                                                    <GradientStop Color="#FFFF3838" Offset="0.0905172"/>
                                                    <GradientStop Color="#FFB20000" Offset="0.491379"/>
                                                    <GradientStop Color="#FFFF3232" Offset="0.49569"/>
                                                    <GradientStop Color="#FFFF9898" Offset="0.797414"/>
                                                </RadialGradientBrush.GradientStops>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <RotateTransform CenterX="0.760031" CenterY="1.24074" Angle="242.904"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                            </RadialGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                    <Path Width="32" Height="32" Stretch="None" Fill="#FFFFFFFF" Data="F1 M 8.57539,9.9896L 9.9896,8.57538C 10.3801,8.18486 11.0133,8.18486 11.4038,8.57538L 16,13.1716L 20.5962,8.57538C 20.9867,8.18485 21.6199,8.18485 22.0104,8.57538L 23.4246,9.98959C 23.8151,10.3801 23.8151,11.0133 23.4246,11.4038L 18.8284,16L 23.4246,20.5962C 23.8151,20.9867 23.8151,21.6199 23.4246,22.0104L 22.0104,23.4246C 21.6199,23.8151 20.9867,23.8151 20.5962,23.4246L 16,18.8284L 11.4038,23.4246C 11.0133,23.8151 10.3801,23.8151 9.98959,23.4246L 8.57538,22.0104C 8.18485,21.6199 8.18486,20.9867 8.57538,20.5962L 13.1716,16L 8.57538,11.4038C 8.18486,11.0133 8.18486,10.3801 8.57539,9.9896 Z "/>
                                </Canvas>
                            </ControlTemplate>
                        </vkc:SwitchCaseConverterItem.Value>
                    </vkc:SwitchCaseConverterItem>
                    <vkc:SwitchCaseConverterItem>
                        <vkc:SwitchCaseConverterItem.Case>
                            <MessageBoxImage>Question</MessageBoxImage>
                        </vkc:SwitchCaseConverterItem.Case>
                        <vkc:SwitchCaseConverterItem.Value>
                            <ControlTemplate>
                                <Canvas Width="32" Height="32" Margin="6">
                                    <Ellipse Width="32" Height="32" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF808080" Fill="#FFFFFFFF"/>
                                    <Ellipse Width="28" Height="28" Canvas.Left="2" Canvas.Top="2" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF808080">
                                        <Ellipse.Fill>
                                            <RadialGradientBrush RadiusX="1.78893" RadiusY="1.78893" Center="0.760031,1.24074" GradientOrigin="0.760031,1.24074">
                                                <RadialGradientBrush.GradientStops>
                                                    <GradientStop Color="#FF6E8BFF" Offset="0.0905172"/>
                                                    <GradientStop Color="#FF223FB3" Offset="0.491379"/>
                                                    <GradientStop Color="#FF426AD0" Offset="0.49569"/>
                                                    <GradientStop Color="#FFD3E0FF" Offset="0.797414"/>
                                                </RadialGradientBrush.GradientStops>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <RotateTransform CenterX="0.760031" CenterY="1.24074" Angle="242.904"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                            </RadialGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                    <Path Width="32" Height="32" Stretch="None" Fill="#FFFFFFFF" Data="F1 M 11.172,11C 10.8701,10.6549 10.1881,6.52531 17.172,7C 22.172,7.33985 24.1616,12.168 20.172,15.6055C 18.6856,16.8861 17.3906,18.8555 16.7499,19.7461C 16.166,20.5579 13.4062,20.5275 13.9374,18.3555C 14.281,16.9505 20.2209,12.9439 17.5156,10.6367C 16.172,9.49089 13.8697,9.65756 13.172,10.6576C 12.5997,11.4776 11.4739,11.3451 11.172,11 Z M 15.7968,22C 16.9014,22 17.7968,22.8954 17.7968,24C 17.7968,25.1046 16.9014,26 15.7968,26C 14.6922,26 13.7968,25.1046 13.7968,24C 13.7968,22.8954 14.6922,22 15.7968,22 Z "/>
                                </Canvas>
                            </ControlTemplate>
                        </vkc:SwitchCaseConverterItem.Value>
                    </vkc:SwitchCaseConverterItem>
                    <vkc:SwitchCaseConverterItem>
                        <vkc:SwitchCaseConverterItem.Case>
                            <MessageBoxImage>Exclamation</MessageBoxImage>
                        </vkc:SwitchCaseConverterItem.Case>
                        <vkc:SwitchCaseConverterItem.Value>
                            <ControlTemplate>
                                <Canvas Width="32" Height="32" Margin="6">
                                    <Path Width="32" Height="32" Stretch="None" StrokeLineJoin="Round" Stroke="#FF808080" Fill="#FFFFFFFF" Data="F1 M 16.0401,2.46277C 15.4793,2.46277 14.9987,2.70307 14.7584,3.18369L 0.740575,27.2143C 0.0997597,28.2556 0.820677,29.4571 2.02221,29.5372L 30.0579,29.5372C 31.1793,29.4571 31.9002,28.2556 31.3395,27.2143L 17.3217,3.18369C 17.0814,2.78318 16.6008,2.46277 16.0401,2.46277 Z "/>
                                    <Path Width="32" Height="32" Stretch="None" StrokeLineJoin="Round" Stroke="#FFC7950A" Data="F1 M 16,5.08411L 2.9148,27.5159L 29.0852,27.5159L 16,5.08411 Z ">
                                        <Path.Fill>
                                            <RadialGradientBrush RadiusX="2.02777" RadiusY="1.78177" Center="0.761115,1.80662" GradientOrigin="0.761115,1.80662">
                                                <RadialGradientBrush.GradientStops>
                                                    <GradientStop Color="#FFFFF74B" Offset="0.211207"/>
                                                    <GradientStop Color="#FFECB610" Offset="0.439655"/>
                                                    <GradientStop Color="#FFE7A400" Offset="0.525862"/>
                                                    <GradientStop Color="#FFFFF512" Offset="0.724138"/>
                                                </RadialGradientBrush.GradientStops>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <SkewTransform CenterX="0.761115" CenterY="1.80662" AngleX="5.12222" AngleY="0"/>
                                                        <RotateTransform CenterX="0.761115" CenterY="1.80662" Angle="254.703"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                            </RadialGradientBrush>
                                        </Path.Fill>
                                    </Path>
                                    <Path Width="32" Height="32" Stretch="None" Data="F1 M 16,23C 17.1046,23 18,23.8954 18,25C 18,26.1046 17.1046,27 16,27C 14.8954,27 14,26.1046 14,25C 14,23.8954 14.8954,23 16,23 Z M 15.2,10.6L 16.8,10.6C 17.3523,10.6 17.8,11.0477 17.8,11.6L 17.6,20.6C 17.6,21.1523 17.1523,21.6 16.6,21.6L 15.4,21.6C 14.8477,21.6 14.4,21.1523 14.4,20.6L 14.2,11.6C 14.2,11.0477 14.6477,10.6 15.2,10.6 Z ">
                                        <Path.Fill>
                                            <LinearGradientBrush StartPoint="0.494832,0.998749" EndPoint="0.494832,0.0231396">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStop Color="#FF000000" Offset="0"/>
                                                    <GradientStop Color="#FF4D4D4D" Offset="1"/>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Path.Fill>
                                    </Path>
                                </Canvas>
                            </ControlTemplate>
                        </vkc:SwitchCaseConverterItem.Value>
                    </vkc:SwitchCaseConverterItem>
                </vkc:SwitchCaseConverter>
            </FrameworkElement.Resources>
            <Grid Margin="6">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Control Template="{TemplateBinding Icon, Converter={StaticResource ThemeMessageBoxIconConverter}}"/>
                <ContentPresenter Grid.Column="1" TextBlock.Foreground="{StaticResource TextBrush}" Margin="6" VerticalAlignment="Center"/>
            </Grid>
            <StackPanel Orientation="Horizontal" Grid.IsSharedSizeScope="True" HorizontalAlignment="Right" Margin="3">
                <Grid Visibility="{Binding ElementName=PART_Button1, Path=Visibility}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition SharedSizeGroup="ThemeMessageBoxButtonColumn"/>
                    </Grid.ColumnDefinitions>
                    <Button x:Name="PART_Button1"/>
                </Grid>
                <Grid Visibility="{Binding ElementName=PART_Button2, Path=Visibility}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition SharedSizeGroup="ThemeMessageBoxButtonColumn"/>
                    </Grid.ColumnDefinitions>
                    <Button x:Name="PART_Button2"/>
                </Grid>
                <Grid Visibility="{Binding ElementName=PART_Button3, Path=Visibility}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition SharedSizeGroup="ThemeMessageBoxButtonColumn"/>
                    </Grid.ColumnDefinitions>
                    <Button x:Name="PART_Button3"/>
                </Grid>
            </StackPanel>
        </StackPanel>
    </ControlTemplate>

    <Style TargetType="{x:Type vk:ThemeMessageBoxContentControl}">
        <Setter Property="Template" Value="{StaticResource ThemeMessageBoxContentControlTemplate}"/>
    </Style>










    <Style TargetType="{x:Type RibbonControl}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MinWidth.RibbonControlLengthUnitType}"
                           Value="Pixel">
                <Setter Property="FrameworkElement.MinWidth"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MinWidth.Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MaxWidth.RibbonControlLengthUnitType}"
                           Value="Pixel">
                <Setter Property="FrameworkElement.MaxWidth"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MaxWidth.Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.RibbonControlLengthUnitType}"
                           Value="Pixel">
                <Setter Property="FrameworkElement.Width"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.RibbonControlLengthUnitType}"
                           Value="Auto">
                <Setter Property="FrameworkElement.Width" Value="Auto"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonControl}">
                    <RibbonContentPresenter x:Name="PART_ContentPresenter"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonContextualTabGroupItemsControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonContextualTabGroupItemsControl}">
                    <Border Background="{TemplateBinding Control.Background}">
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <RadialGradientBrush x:Key="Đ" GradientOrigin="0.5,1" Center="0.5,1" RadiusY="1">
        <GradientStop Offset="0.5" Color="#30000000"/>
        <GradientStop Offset="1.2" Color="#80000000"/>
    </RadialGradientBrush>
    <Style TargetType="{x:Type RibbonContextualTabGroup}">
        <Setter Property="FrameworkElement.Height"
                    Value="{Binding Path=(SystemParameters.WindowCaptionHeight)}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonContextualTabGroup}">
                    <FrameworkTemplate.Resources>
                        <DataTemplate DataType="{x:Type system:String}">
                            <TextBlock Text="{TemplateBinding ContentPresenter.Content}" TextTrimming="CharacterEllipsis"/>
                        </DataTemplate>
                    </FrameworkTemplate.Resources>
                    <Border x:Name="OuterBorder" Padding="{TemplateBinding Control.Padding}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,0,0"
                  RenderOptions.ClearTypeHint="Enabled">
                        <Border x:Name="InnerBorder" Background="{StaticResource Đ}"
                    BorderBrush="{TemplateBinding Control.Background}" BorderThickness="1,1,1,2"
                    CornerRadius="2,2,0,0">
                            <ContentPresenter ContentSource="Header" VerticalAlignment="Center" Margin="2,0,2,0"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="InnerBorder" Property="Border.BorderThickness" Value="2,2,2,3"/>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonSeparator}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Background"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                    <Border x:Name="MainBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
                        <TextBlock x:Name="Text" Text="{TemplateBinding RibbonSeparator.Label}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="Text"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextBlock.Foreground"/>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <StackPanel>
                                <Line x:Name="Line" X1="0" Y1="0" X2="1" Y2="0" Stroke="{TemplateBinding Control.BorderBrush}"
                      StrokeThickness="1" Stretch="Fill"/>
                                <Line x:Name="HighlightLine" X1="0" Y1="0" X2="1" Y2="0" Stroke="White" StrokeThickness="1"
                      Stretch="Fill"/>
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="Line"
                                  Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"
                                  Property="Shape.Stroke"/>
                                    <Setter TargetName="HighlightLine" Property="Shape.Stroke" Value="Transparent"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <LinearGradientBrush x:Key="Û" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4CFFFFFF" Offset="0" />
        <GradientStop Color="#26FFFFFF" Offset="1" />
        <GradientStop Color="#26FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
        <GradientStop Color="#00FFFFFF" Offset="0.856" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Ú" Color="#FF393939"/>
    <LinearGradientBrush x:Key="Ý" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4C000000" Offset="0" />
        <GradientStop Color="#4C000000" Offset="0.467" />
        <GradientStop Color="#26000000" Offset="0.479" />
        <GradientStop Color="#26000000" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Ü" Color="#FF393939"/>
    <LinearGradientBrush x:Key="Þ" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FF939393"/>
        <GradientStop Offset="0.479" Color="#FF6C6C6C"/>
        <GradientStop Offset="0.486" Color="#FF4D4D4D"/>
        <GradientStop Offset="1" Color="#FF4F4F4F"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ë" Color="#80333333"/>
    <SolidColorBrush x:Key="í" Color="#B8333333"/>
    <SolidColorBrush x:Key="ĉ" Color="#EE222222"/>
    <SolidColorBrush x:Key="Ë" Color="#FF9E9E9E"/>
    <SolidColorBrush x:Key="Ă" Color="#FF9E9E9E"/>
    <LinearGradientBrush x:Key="ď" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#40FFFEFE"/>
        <GradientStop Offset="0.39" Color="#40FFFEFE"/>
        <GradientStop Offset="0.39" Color="#20FFCE68"/>
        <GradientStop Offset="0.69" Color="#20FFCE68"/>
        <GradientStop Offset="1" Color="#10FFFFFF"/>
    </LinearGradientBrush>
    <system:Double x:Key="ą">20.0</system:Double>
    <system:Double x:Key="Ć">22.0</system:Double>
    <system:Double x:Key="ß">91.0</system:Double>
    <system:Double x:Key="á">94.0</system:Double>
    <system:Int32 x:Key="Í">900</system:Int32>
    <system:Int32 x:Key="Î">20000</system:Int32>
    <system:Int32 x:Key="Ï">0</system:Int32>
    <Color x:Key="Ö">#71000000</Color>
    <BooleanToVisibilityConverter x:Key="à"/>
    <Geometry x:Key="Ð">
        M 0 0 L 2.5 3 L 5 0 Z
    </Geometry>
    <Geometry x:Key="ï">
        M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z
    </Geometry>
    <Geometry x:Key="ñ">
        M10,1.2L4.5,7.3 1.5,5 1.5,7.5 4.5,10 4.5,10 10,4Z
    </Geometry>
    <Geometry x:Key="ð">
        M 0,0 L 4,3.5 L 0,7 Z
    </Geometry>
    <SolidColorBrush x:Key="Ñ" Color="#F0444444"/>
    <SolidColorBrush x:Key="Ò" Color="#FF333333"/>
    <SolidColorBrush x:Key="ħ" Color="#FF6C747D"/>
    <DrawingBrush x:Key="Ĩ" Viewbox="0,0,3,3" Viewport="0,0,3,3" TileMode="Tile" ViewportUnits="Absolute"
                ViewboxUnits="Absolute">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing Brush="{StaticResource ħ}" Geometry="M 0,0 L 2,0 2,2 0,2 Z"/>
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    <Style x:Key="Ó" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Width" Value="11"/>
        <Setter Property="FrameworkElement.Height" Value="11"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNWSE"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="0,0,2,2" Data="M 9,0 L 11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3 Z"
                  Fill="{StaticResource Ĩ}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
                <Setter Property="FrameworkElement.Cursor" Value="SizeNESW"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ó" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Width" Value="11"/>
        <Setter Property="FrameworkElement.Height" Value="11"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNESW"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="2,0,0,2" Data="M 0,0 L 2,0 2,3 5,3 5,6 8,6 8,9 11,9 11,11 0,11 Z"
                  Fill="{StaticResource Ĩ}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
                <Setter Property="FrameworkElement.Cursor" Value="SizeNWSE"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Õ" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Width" Value="11"/>
        <Setter Property="FrameworkElement.Height" Value="11"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNESW"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="0,2,2,0" Data="M 0,0 L 0,3 3,3 3,6 6,6 6,9 9,9 9,11 11,11 11,0 Z"
                  Fill="{StaticResource Ĩ}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
                <Setter Property="FrameworkElement.Cursor" Value="SizeNWSE"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Ô" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Height" Value="11"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="0,0,2,2" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                  Fill="{StaticResource Ĩ}">
                            <Path.Data>
                                <RectangleGeometry Rect="0,0,11,3"/>
                            </Path.Data>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ī" Color="#FF222222"/>
    <LinearGradientBrush x:Key="Ĭ" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#50FFFFFF" Offset="0"/>
        <GradientStop Color="#40FFFFFF" Offset="1.0"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type RibbonTabHeader}">
        <Setter Property="FrameworkElement.Margin" Value="0,1,0,0"/>
        <Setter Property="Control.Padding" Value="9,1,9,0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="22"/>
        <Setter Property="Control.Background"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="RibbonTabHeader.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="RibbonTabHeader.CheckedBackground" Value="{StaticResource Ĭ}"/>
        <Setter Property="RibbonTabHeader.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonTabHeader.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonTabHeader}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Border x:Name="PART_OuterBorder" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,0"
                    CornerRadius="3,3,0,0" Margin="2,-1,2.5,0">
                            <Border x:Name="InnerBorder" RenderOptions.ClearTypeHint="Enabled" BorderThickness="1,1,1,0"
                      CornerRadius="2,2,0,0" Padding="{TemplateBinding Control.Padding}">
                                <ContentPresenter ContentSource="Content" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="PART_OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="PART_OuterBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="PART_OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder" Property="Border.Background" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder" Property="Border.Background" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="RibbonTabHeader.IsRibbonTabSelected" Value="true">
                <Setter Property="Control.TabIndex" Value="-1"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ĭ" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.Width" Value="14"/>
        <Setter Property="Control.Background"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).Background}"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).BorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="OuterBorder" CornerRadius="3,0,0,3" BorderThickness="1"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}">
                        <Border Name="InnerBorder" CornerRadius="3,0,0,3" Background="#80FFFFFF">
                            <Path Name="GlyphPath" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#808080"
                    Data="M 4,0 L 0,3.5 4,7 "/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Control.HorizontalContentAlignment" Value="Right">
                            <Setter TargetName="GlyphPath" Property="Path.Data" Value="M 0,0 L 4,3.5 0,7 "/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0,3,3,0"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0,3,3,0"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).MouseOverBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).PressedBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="GlyphPath"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                              Property="Shape.Fill"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <rp:RibbonScrollButtonVisibilityConverter x:Key="Į"/>
    <ControlTemplate x:Key="į" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Control.Padding}"
                              Grid.ColumnSpan="3" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
            <RepeatButton Style="{StaticResource ĭ}" HorizontalContentAlignment="Left" Grid.Column="0"
                    Command="{x:Static ScrollBar.LineLeftCommand}" Focusable="false"
                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                <UIElement.Visibility>
                    <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource Į}" ConverterParameter="0">
                        <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                    </MultiBinding>
                </UIElement.Visibility>
            </RepeatButton>
            <RepeatButton Style="{StaticResource ĭ}" HorizontalContentAlignment="Right" Grid.Column="2"
                    Command="{x:Static ScrollBar.LineRightCommand}" Focusable="false"
                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                <UIElement.Visibility>
                    <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource Į}"
                        ConverterParameter="100">
                        <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                    </MultiBinding>
                </UIElement.Visibility>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <Style x:Key="Ī" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Control.Template" Value="{StaticResource į}"/>
    </Style>
    <ControlTemplate x:Key="Ħ" TargetType="{x:Type RibbonToggleButton}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Border x:Name="OuterBorder"
              CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}"
              Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <Border x:Name="MiddleBorder"
              CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}"
              Background="Transparent" BorderBrush="Transparent"
              BorderThickness="{TemplateBinding Control.BorderThickness}">
                <Border x:Name="InnerBorder" Background="Transparent" BorderBrush="Transparent"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Padding="{TemplateBinding Control.Padding}"
                CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}">
                    <StackPanel x:Name="StackPanel"
                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                        <Image x:Name="PART_Image" Source="{TemplateBinding RibbonToggleButton.LargeImageSource}"
                   Width="32" Height="32" RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                   HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                   Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}}"/>
                        <Grid x:Name="Grid" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonToggleButton.Label}"
                                        TextAlignment="Center" VerticalAlignment="Top" HorizontalAlignment="Center" LineHeight="13px"
                                        LineStackingStrategy="BlockLineHeight"
                                        HasTwoLines="{TemplateBinding RibbonTwoLineText.HasTwoLines}"
                                        PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                                        PathFill="{TemplateBinding Control.Foreground}" Margin="1,1,1,0"/>
                        </Grid>
                    </StackPanel>
                </Border>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Value="Large"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                <Setter Property="FrameworkElement.Height" Value="66"/>
                <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
                <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
            </DataTrigger>
            <DataTrigger Value="Small"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
                <Setter TargetName="PART_Image" Property="FrameworkElement.Margin" Value="1,0,1,0"/>
                <Setter TargetName="PART_Image"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                        Property="Image.Source"/>
                <Setter TargetName="PART_Image" Property="FrameworkElement.Width" Value="16"/>
                <Setter TargetName="PART_Image" Property="FrameworkElement.Height" Value="16"/>
                <Setter TargetName="TwoLineText" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
                <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="1"/>
                <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                             Value="Small"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Height" Value="Auto"/>
            </MultiDataTrigger>
            <DataTrigger Value="False"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
                <Setter TargetName="TwoLineText" Value="{x:Null}" Property="RibbonTwoLineText.Text"/>
                <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="0"/>
            </DataTrigger>
            <DataTrigger Value="Collapsed"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter TargetName="PART_Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText" Value="{StaticResource Ë}"
                        Property="RibbonTwoLineText.PathFill"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked" Value="True"/>
                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ToggleButton.IsChecked" Value="True"/>
                    <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ButtonBase.IsPressed" Value="true"/>
                    <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="RibbonToggleButton.IsInControlGroup" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
                <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, FallbackValue=false}"
                             Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="RibbonToggleButton.CornerRadius" Value="2"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="RibbonToggleButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonToggleButton.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonToggleButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonToggleButton.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonToggleButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="Control.Template" Value="{StaticResource Ħ}"/>
        <Setter Property="RibbonToggleButton.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Thickness Left="1" Top="1" Right="1" Bottom="2"
                         x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}"/>
        </Style.Resources>
    </Style>
    <SolidColorBrush x:Key="Ĉ" Color="#90B1BBC6"/>
    <SolidColorBrush x:Key="ć" Color="#90DEDEDE"/>
    <Style TargetType="{x:Type RibbonTextBox}">
        <Setter Property="Control.Background" Value="{StaticResource ĉ}"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="RibbonTextBox.TextBoxWidth" Value="80"/>
        <Setter Property="RibbonTextBox.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="RibbonTextBox.MouseOverBackground" Value="#FFD1D1D1"/>
        <Setter Property="RibbonTextBox.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="RibbonTextBox.FocusedBackground" Value="#FFFF7100"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="RibbonTextBox.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonTextBox}">
                    <Border x:Name="MainBorder" Margin="1">
                        <Grid Margin="1,0,1,0" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition x:Name="OuterTextColumn" Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Image x:Name="Image" Source="{TemplateBinding RibbonTextBox.LargeImageSource}"
                     RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                     HorizontalAlignment="Center" Grid.Row="0" Grid.Column="1" Margin="1" Width="32" Height="32"/>
                            <Grid x:Name="Grid" Row="1" Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid Name="InnerGrid" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition x:Name="TextColumn" Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="TwoLineTextPanel" Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonTextBox.Label}"
                                              TextAlignment="Center" LineHeight="13px" LineStackingStrategy="BlockLineHeight" Margin="2,0,2,0"/>
                                        <Rectangle x:Name="FocusVisual" Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2"
                               Visibility="Collapsed"/>
                                    </Grid>
                                    <Border x:Name="Border" Grid.Column="1" BorderThickness="{TemplateBinding Control.BorderThickness}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}"
                          Background="{TemplateBinding Control.Background}" Height="{StaticResource ą}"
                          HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2,0,2,0">
                                        <ScrollViewer x:Name="PART_ContentHost" Margin="1"
                                  Width="{TemplateBinding RibbonTextBox.TextBoxWidth}" VerticalAlignment="Center"/>
                                    </Border>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}">
                            <Setter TargetName="TextColumn" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="OuterTextColumn" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="PART_ContentHost" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="Border" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="Grid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="InnerGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                        </DataTrigger>
                        <DataTrigger Value="Large"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                            <Setter Property="FrameworkElement.Height" Value="66"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Height" Value="32"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Width" Value="32"/>
                            <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
                            <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
                        </DataTrigger>
                        <DataTrigger Value="Small"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
                            <Setter TargetName="Image"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                              Property="Image.Source"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Height" Value="16"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Width" Value="16"/>
                            <Setter TargetName="Image" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Margin" Value="2,0,1,0"/>
                            <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="2,0,1,0"/>
                            <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="false"/>
                            <Setter TargetName="Image" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Image" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="InnerGrid" Property="FrameworkElement.Margin" Value="0"/>
                        </DataTrigger>
                        <DataTrigger Value="Collapsed"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Value="False"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
                            <Setter TargetName="TwoLineTextPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <Trigger Property="RibbonTextBox.ShowKeyboardCues" Value="true">
                            <Setter TargetName="FocusVisual" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="Border" Value="{StaticResource ć}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{StaticResource Ĉ}" Property="Border.BorderBrush"/>
                            <Setter TargetName="MainBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="RibbonTextBox.IsInControlGroup" Value="true">
                            <Setter TargetName="MainBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                              Property="Control.Background"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="FocusVisual"
                              Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                              Property="Shape.Stroke"/>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="ContentControl.ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect" Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                             Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                             Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Ribbon}}, Path=Background}"/>
                                    <Rectangle x:Name="OverlayRect" Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                             Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                             Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonTextBox}}, Path=Background}"/>
                                </Canvas>
                                <ContentPresenter Content="{Binding}"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Value="false"
                                     Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}, Path=(ScrollViewer.CanContentScroll)}">
                                    <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                                  Property="Canvas.Top"/>
                                    <Setter TargetName="OpaqueRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                  Property="Canvas.Left"/>
                                    <Setter TargetName="OverlayRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                                    <Setter TargetName="OverlayRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                  Property="Canvas.Left"/>
                                </DataTrigger>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>
    <LinearGradientBrush x:Key="Ê" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#CAFFFFFF" Offset="0"/>
            <GradientStop Color="#20FFFFFF" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type RibbonToolTip}">
        <Setter Property="Control.Background"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.FontSize"
                    Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="Control.FontStyle"
                    Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="Control.FontWeight"
                    Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Control.FontFamily"
                    Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="Control.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
        <Setter Property="ToolTip.HasDropShadow"
                    Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="5,5,5,4"/>
        <Setter Property="ToolTip.Placement" Value="Mouse"/>
        <Setter Property="FrameworkElement.Width" Value="318"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToolTip}">
                    <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" UIElement.SnapsToDevicePixels="true" CornerRadius="2"
                                          RenderOptions.ClearTypeHint="Enabled">
                        <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" MinHeight="50" CornerRadius="2">
                            <Border x:Name="InnerBorder" Background="{StaticResource Ê}" BorderThickness="0"
                      BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                      Padding="{TemplateBinding Control.Padding}" CornerRadius="2">
                                <StackPanel>
                                    <Grid x:Name="Header">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <TextBlock x:Name="Title" Text="{TemplateBinding RibbonToolTip.Title}" FontWeight="Bold"
                               TextWrapping="Wrap" Grid.ColumnSpan="2"/>
                                        <Image x:Name="Image" Margin="7,9,6,4" Source="{TemplateBinding RibbonToolTip.ImageSource}"
                           Grid.Row="1" Stretch="None"
                           HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                                        <TextBlock x:Name="Description" Margin="8,8,0,0"
                               Text="{TemplateBinding RibbonToolTip.Description}" Grid.Row="1" Grid.Column="1"
                               TextWrapping="Wrap"
                               HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                                    </Grid>
                                    <RibbonSeparator x:Name="Separator" Margin="0,6,0,0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                                          Visibility="Collapsed"/>
                                    <Grid x:Name="Footer" Margin="0,4,0,0" Visibility="Collapsed">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Image x:Name="FooterImage" Margin="0,0,7,0" Stretch="None"
                           HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                           Source="{TemplateBinding RibbonToolTip.FooterImageSource}"/>
                                        <TextBlock x:Name="FooterTitle" Text="{TemplateBinding RibbonToolTip.FooterTitle}"
                               FontWeight="Bold" TextWrapping="Wrap" Grid.Column="1"/>
                                        <TextBlock x:Name="FooterDescription" Margin="0,0,6,0"
                               Text="{TemplateBinding RibbonToolTip.FooterDescription}" TextWrapping="Wrap"
                               Grid.Column="1" Grid.Row="1"/>
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>
                    </classic:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="RibbonToolTip.HasHeader" Value="false">
                            <Setter TargetName="Header" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="RibbonToolTip.ImageSource">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Description" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Description" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter Property="FrameworkElement.Width" Value="210"/>
                        </Trigger>
                        <Trigger Property="RibbonToolTip.HasFooter" Value="true">
                            <Setter TargetName="Separator" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Footer" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="RibbonToolTip.FooterDescription">
                            <Setter TargetName="FooterDescription" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolTip.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="Border" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                        </DataTrigger>
                        <Trigger Property="RibbonToolTip.IsPlacementTargetInRibbonGroup" Value="true">
                            <Setter Property="ToolTip.Placement" Value="Custom"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Value="{x:Null}" Property="RibbonToolTip.ImageSource"/>
                                <Condition Value="{x:Null}" Property="RibbonToolTip.Description"/>
                                <Condition Property="RibbonToolTip.HasFooter" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="FrameworkElement.MinHeight" Value="0"/>
                            <Setter TargetName="Title" Property="TextBlock.FontWeight" Value="Normal"/>
                            <Setter TargetName="Description" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter Property="FrameworkElement.Width" Value="Auto"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonTwoLineText}">
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonTwoLineText}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TextBlock Name="PART_TextBlock1"
                       BaselineOffset="{TemplateBinding RibbonTwoLineText.BaselineOffset}"
                       LineHeight="{TemplateBinding RibbonTwoLineText.LineHeight}"
                       LineStackingStrategy="{TemplateBinding RibbonTwoLineText.LineStackingStrategy}"
                       Padding="{TemplateBinding RibbonTwoLineText.Padding}"
                       TextAlignment="{TemplateBinding RibbonTwoLineText.TextAlignment}"
                       TextDecorations="{TemplateBinding RibbonTwoLineText.TextDecorations}"
                       TextEffects="{TemplateBinding RibbonTwoLineText.TextEffects}" TextTrimming="None"
                       TextWrapping="NoWrap"
                       VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                       Grid.Row="0"/>
                        <DockPanel Grid.Row="1"
                       HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}">
                            <Grid x:Name="pathGrid" MinHeight="{TemplateBinding RibbonTwoLineText.LineHeight}"
                    Margin="2,0,0,0" DockPanel.Dock="Right">
                                <Path Name="PART_Path" VerticalAlignment="Center"
                      Data="{TemplateBinding RibbonTwoLineText.PathData}"
                      Fill="{TemplateBinding RibbonTwoLineText.PathFill}"
                      Stroke="{TemplateBinding RibbonTwoLineText.PathStroke}"/>
                            </Grid>
                            <TextBlock Name="PART_TextBlock2" Margin="0,0,2,0"
                         BaselineOffset="{TemplateBinding RibbonTwoLineText.BaselineOffset}"
                         LineHeight="{TemplateBinding RibbonTwoLineText.LineHeight}"
                         LineStackingStrategy="{TemplateBinding RibbonTwoLineText.LineStackingStrategy}"
                         Padding="{TemplateBinding RibbonTwoLineText.Padding}"
                         TextAlignment="{TemplateBinding RibbonTwoLineText.TextAlignment}"
                         TextDecorations="{TemplateBinding RibbonTwoLineText.TextDecorations}"
                         TextEffects="{TemplateBinding RibbonTwoLineText.TextEffects}"
                         TextTrimming="{TemplateBinding RibbonTwoLineText.TextTrimming}"
                         TextWrapping="NoWrap"
                         VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                         DockPanel.Dock="Left"/>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="RibbonTwoLineText.PathData">
                            <Setter TargetName="pathGrid" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="RibbonTwoLineText.Text">
                            <Setter TargetName="PART_TextBlock2" Property="FrameworkElement.Margin" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonQuickAccessToolBar}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="true"/>
        <Setter Property="FrameworkElement.Height"
                    Value="{DynamicResource {x:Static SystemParameters.CaptionHeightKey}}"/>
        <Setter Property="FrameworkElement.Margin" Value="3,-0.5,3,-1.4"/>
        <Setter Property="Control.Background"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonQuickAccessToolBar}">
                    <Grid SnapsToDevicePixels="true" Margin="{TemplateBinding FrameworkElement.Margin}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="1"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <rp:RibbonQuickAccessToolBarPanel Name="PART_MainPanel" IsItemsHost="true" Grid.Column="0"/>
                        <ContentPresenter Name="MainCustomizeMenuHost" Grid.Column="2"
                              Content="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Grid x:Name="OverflowButtonHost" Column="2" Visibility="Collapsed">
                            <RibbonToggleButton x:Name="PART_OverflowButton" Style="{StaticResource {x:Type RibbonToggleButton}}"
                                         Width="12" ClickMode="Press" KeyTip="00"
                                         IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <RibbonToggleButton.ControlSizeDefinition>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                </RibbonToggleButton.ControlSizeDefinition>
                            </RibbonToggleButton>
                            <Path HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,0,0,0" IsHitTestVisible="false"
                    Width="7" Height="5" Fill="{TemplateBinding Control.Foreground}" Stretch="Fill"
                    Stroke="{TemplateBinding Control.Foreground}" Data="M 0,0 L 2,2 0,4 M 4,0 L 6,2 4,4 "/>
                            <Popup x:Name="PART_OverflowPopup" AllowsTransparency="true" Placement="Bottom" Focusable="false"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <classic:SystemDropShadowChrome FrameworkElement.Name="Shdw" Color="Transparent" UIElement.Focusable="true"
                                                RenderOptions.ClearTypeHint="Enabled" FrameworkElement.FocusVisualStyle="{x:Null}">
                                    <Border x:Name="PopupBorder" Background="{TemplateBinding Control.Background}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2" BorderThickness="1"
                          Padding="2">
                                        <DockPanel>
                                            <rp:RibbonQuickAccessToolBarOverflowPanel Name="PART_OverflowPanel" KeyboardNavigation.TabNavigation="Cycle"
                                                                        KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                            <ContentPresenter Name="OverflowCustomizeMenuHost" DockPanel.Dock="Right"/>
                                        </DockPanel>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="false"
                                 Binding="{Binding RelativeSource={RelativeSource AncestorType=Ribbon}, Path=ShowQuickAccessToolBarOnTop}">
                            <Setter TargetName="PART_MainPanel" Property="FrameworkElement.Margin" Value="2,0,2,0"/>
                        </DataTrigger>
                        <Trigger Property="RibbonQuickAccessToolBar.HasOverflowItems" Value="true">
                            <Setter TargetName="OverflowButtonHost" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="MainCustomizeMenuHost" Value="{x:Null}" Property="ContentPresenter.Content"/>
                            <Setter TargetName="OverflowCustomizeMenuHost"
                              Value="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent}}"
                              Property="ContentPresenter.Content"/>
                        </Trigger>
                        <Trigger SourceName="PART_OverflowPopup" Property="Popup.IsOpen" Value="false">
                            <Setter TargetName="PART_OverflowPopup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="PART_OverflowPopup" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="PopupBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PopupBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PopupBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="Shdw" Property="classic:SystemDropShadowChrome.CornerRadius" Value="0"/>
                        </DataTrigger>
                        <Trigger SourceName="PART_OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
                <Setter Property="FrameworkElement.Margin" Value="4,0,6,0"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="Ø" Color="#10FFFFFF"/>
    <SolidColorBrush x:Key="È" Color="#FF595959"/>
    <SolidColorBrush x:Key="É" Color="#FF222222"/>
    <LinearGradientBrush x:Key="Ù" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
        <GradientStop Color="#30FFFFFF" Offset="0" />
        <GradientStop Color="#18FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
        <GradientStop Color="#00FFFFFF" Offset="1" />
    </LinearGradientBrush>
    <Style TargetType="{x:Type Ribbon}">
        <Style.Resources>
            <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">Fade</PopupAnimation>
        </Style.Resources>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="{StaticResource È}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource É}"/>
        <Setter Property="Ribbon.MouseOverBorderBrush" Value="{StaticResource Ú}"/>
        <Setter Property="Ribbon.MouseOverBackground" Value="{StaticResource Û}"/>
        <Setter Property="Ribbon.PressedBorderBrush" Value="{StaticResource Ü}"/>
        <Setter Property="Ribbon.PressedBackground" Value="{StaticResource Ý}"/>
        <Setter Property="Ribbon.CheckedBorderBrush" Value="{StaticResource Ü}"/>
        <Setter Property="Ribbon.CheckedBackground" Value="{StaticResource Þ}"/>
        <Setter Property="Ribbon.FocusedBorderBrush" Value="{StaticResource Ú}"/>
        <Setter Property="Ribbon.FocusedBackground" Value="{StaticResource Û}"/>
        <Setter Property="Control.FontSize"
                    Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="Control.FontStyle"
                    Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="Control.FontWeight"
                    Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Control.FontFamily"
                    Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="Control.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="TitleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" Margin="6,0" HorizontalAlignment="Center" TextTrimming="CharacterEllipsis" 
                               Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrush}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Ribbon}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Name="BackgroundBorder" Grid.Row="1" Grid.ColumnSpan="3" Grid.RowSpan="3"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"/>
                        <Border Grid.ColumnSpan="3" Grid.Row="1">
                            <Popup x:Name="PART_ITEMSPRESENTERPOPUP" AllowsTransparency="true"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <classic:SystemDropShadowChrome FrameworkElement.Name="Shdw" UIElement.Focusable="true" Color="Transparent"
                                                FrameworkElement.Margin="0,0,5,5" RenderOptions.ClearTypeHint="Enabled"
                                                FrameworkElement.FocusVisualStyle="{x:Null}">
                                    <Border Name="CollapsedPopupBackgroundBorder" Background="{TemplateBinding Control.Background}">
                                        <ContentControl x:Name="popupItemsPresenterHost" Margin="0,1,0,0" Focusable="false"
                                    KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Border>
                        <ContentControl x:Name="mainItemsPresenterHost" Grid.ColumnSpan="3" Grid.Row="2" Focusable="false">
                            <Border x:Name="groupsBorder" Background="{StaticResource Ù}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,0,1,1"
                      Height="{StaticResource ß}" SnapsToDevicePixels="true">
                                <Border BorderThickness="0,0,0,1" Margin="0,0,0,1" BorderBrush="{StaticResource Ø}"
                        SnapsToDevicePixels="true">
                                    <ItemsPresenter Name="ItemsPresenter"/>
                                </Border>
                            </Border>
                        </ContentControl>
                        <Border x:Name="QatBottomHost" Grid.Row="3" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}" Visibility="Collapsed" Height="25">
                            <ContentPresenter x:Name="QatBottomHostContentPresenter" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,-2,0,0"
                                IsHitTestVisible="true"/>
                        </Border>
                        <Border Name="titleBarBackground" Grid.ColumnSpan="3" Background="{StaticResource Ù}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0,0,0,1"
                    Visibility="Collapsed"/>
                        <DockPanel Grid.Column="0" Grid.ColumnSpan="3" LastChildFill="true" Height="28">
                            <ContentControl x:Name="windowButtonPlaceHolder" IsHitTestVisible="false" DockPanel.Dock="Right" Focusable="false"
                              Margin="3,0,0,0" Visibility="{TemplateBinding IsHostedInRibbonWindow, Converter={StaticResource à}}">
                                <ContentControl.Width>
                                    <PriorityBinding>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=vk:ThemeRibbonWindow}" Path="ActualWindowCaptionButtonWidth"/>
                                        <Binding Path="(SystemParameters.WindowCaptionButtonWidth)"/>
                                    </PriorityBinding>
                                </ContentControl.Width>
                            </ContentControl>
                            <ContentControl x:Name="windowIconPadding" Margin="0,0,3,0" IsHitTestVisible="false" DockPanel.Dock="Left"
                              Focusable="false" Width="{Binding Path=(SystemParameters.SmallIconWidth)}"/>
                            <rp:RibbonTitlePanel x:Name="PART_TitlePanel">
                                <Grid x:Name="QatTopHost">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="QatTopHostLeftBorder" Grid.Column="0" Width="3" Background="#77222222" BorderBrush="#66CCCCCC" BorderThickness="1" CornerRadius="2"/>
                                    <ContentPresenter x:Name="QatTopHostContentPresenter" Grid.Column="1" Margin="0,5,0,0" Content="{TemplateBinding Ribbon.QuickAccessToolBar}" IsHitTestVisible="true"/>
                                    <Border x:Name="QatTopHostRightBorder" Grid.Column="2" Width="3" Background="#77222222" BorderBrush="#66CCCCCC" BorderThickness="1" CornerRadius="2"/>
                                </Grid>
                                <ContentPresenter x:Name="PART_TitleHost" ContentSource="Title"
                                  ContentTemplate="{TemplateBinding Ribbon.TitleTemplate}"
                                  TextBlock.FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}"
                                  TextBlock.FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}"
                                  TextBlock.FontWeight="{DynamicResource {x:Static SystemFonts.CaptionFontWeightKey}}"
                                  TextElement.Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="3,0"
                                  MinWidth="75" IsHitTestVisible="false"
                                  MinHeight="{Binding Path=(SystemParameters.WindowCaptionHeight)}">
                                    <FrameworkElement.Resources>
                                        <DataTemplate DataType="{x:Type system:String}">
                                            <TextBlock x:Name="titleTextBlock" Text="{TemplateBinding ContentPresenter.Content}"
                                 TextTrimming="CharacterEllipsis"
                                 HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}"/>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Value="False" Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}">
                                                    <Setter TargetName="titleTextBlock" Property="FrameworkElement.Margin" Value="0"/>
                                                    <Setter TargetName="titleTextBlock" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
                                                </DataTrigger>
                                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                                    <Setter TargetName="titleTextBlock" Property="FrameworkElement.Margin" Value="0,1,0,0"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Path=(SystemParameters.UxThemeName)}" Value="AeroLite"/>
                                                        <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="False"/>
                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Ribbon}, Path=IsHostedInRibbonWindow}"
                                               Value="True"/>
                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RibbonWindow}, Path=WindowState}"
                                               Value="Normal"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter TargetName="titleTextBlock" Property="FrameworkElement.Margin" Value="0,0,0,7"/>
                                                </MultiDataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </FrameworkElement.Resources>
                                </ContentPresenter>
                                <RibbonContextualTabGroupItemsControl x:Name="PART_ContextualTabGroupItemsControl" IsHitTestVisible="true"
                                                             WindowChrome.IsHitTestVisibleInChrome="true" HorizontalAlignment="Center"/>
                            </rp:RibbonTitlePanel>
                        </DockPanel>
                        <ContentPresenter x:Name="applicationMenu" Grid.Row="1"
                              Content="{TemplateBinding Ribbon.ApplicationMenu}" VerticalAlignment="Top"/>
                        <RibbonTabHeaderItemsControl x:Name="TabHeaderItemsControl" VerticalAlignment="Top" HorizontalAlignment="Left" Grid.Row="1"
                                                Grid.Column="1" Margin="1,1,1,0"/>
                        <ContentPresenter x:Name="PART_HelpPane" ContentSource="HelpPaneContent"
                              ContentTemplate="{TemplateBinding Ribbon.HelpPaneContentTemplate}" Grid.Column="2"
                              Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Ribbon.IsCollapsed" Value="true">
                            <Setter TargetName="applicationMenu" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="QatBottomHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="QatTopHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="mainItemsPresenterHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="TabHeaderItemsControl" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_HelpPane" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_ContextualTabGroupItemsControl" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_TitleHost" Property="FrameworkElement.MinWidth" Value="0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Ribbon.IsCollapsed" Value="true"/>
                                <Condition Property="Ribbon.IsHostedInRibbonWindow" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <Trigger Property="Ribbon.ShowQuickAccessToolBarOnTop" Value="false">
                            <Setter TargetName="QatTopHostContentPresenter" Value="{x:Null}" Property="ContentPresenter.Content"/>
                            <Setter TargetName="QatTopHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="QatBottomHost" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="QatBottomHostContentPresenter"
                              Value="{Binding Path=QuickAccessToolBar, RelativeSource={RelativeSource TemplatedParent}}"
                              Property="ContentPresenter.Content"/>
                            <Setter TargetName="BackgroundBorder" Property="Border.BorderThickness" Value="0,0,0,1"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=QuickAccessToolBar.HasItems}"
                                   Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=QuickAccessToolBar.CustomizeMenuButton}"
                                   Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="QatTopHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="QatBottomHost" Property="UIElement.Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <Trigger Property="Ribbon.IsMinimized" Value="true">
                            <Setter TargetName="mainItemsPresenterHost" Value="{x:Null}" Property="ContentControl.Content"/>
                            <Setter TargetName="mainItemsPresenterHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="popupItemsPresenterHost" Value="{Binding ElementName=groupsBorder}"
                              Property="ContentControl.Content"/>
                            <Setter TargetName="BackgroundBorder" Property="Border.BorderThickness" Value="0,0,0,1"/>
                            <Setter TargetName="BackgroundBorder" Property="Border.Margin" Value="0,0,0,-1"/>
                        </Trigger>
                        <Trigger Property="Ribbon.WindowIconVisibility" Value="Collapsed">
                            <Setter TargetName="windowIconPadding" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Ribbon.IsMinimized" Value="true"/>
                                <Condition Property="Ribbon.ShowQuickAccessToolBarOnTop" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="QatBottomHost" Property="Border.BorderThickness" Value="0,1,0,0"/>
                            <Setter TargetName="QatBottomHost" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="Ribbon.IsHostedInRibbonWindow" Value="false">
                            <Setter TargetName="BackgroundBorder" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="BackgroundBorder" Property="Grid.RowSpan" Value="4"/>
                            <Setter TargetName="titleBarBackground" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="windowIconPadding" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Ribbon.IsDropDownOpen" Value="true">
                            <Setter TargetName="BackgroundBorder" Property="Border.BorderThickness" Value="0"/>
                        </Trigger>
                        <Trigger SourceName="PART_ITEMSPRESENTERPOPUP" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RibbonWindow}, Path=IsActive}"
                                   Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHostedInRibbonWindow}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_TitleHost"
                              Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="BackgroundBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="groupsBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="groupsBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="groupsBorder" Value="{StaticResource á}"
                              Property="FrameworkElement.Height"/>
                            <Setter TargetName="QatBottomHost"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="titleBarBackground" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="titleBarBackground"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="CollapsedPopupBackgroundBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_ITEMSPRESENTERPOPUP" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="FrameworkElement.Margin" Value="10,1,2,2"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="Border.BorderThickness" Value="0"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="QatTopHostLeftBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="QatTopHostRightBorder" Property="FrameworkElement.Margin" Value="0,1,2,2"/>
                            <Setter TargetName="QatTopHostRightBorder" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="QatTopHostRightBorder" Property="Border.BorderThickness" Value="0"/>
                            <Setter TargetName="QatTopHostRightBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="QatTopHostRightBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                              Property="Border.Background"/>
                        </DataTrigger>
                        <DataTrigger Value="Aero" Binding="{Binding Path=(SystemParameters.UxThemeName)}">
                            <Setter TargetName="QatTopHost" Property="FrameworkElement.Margin" Value="0,-3,0,0"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="FrameworkElement.Margin" Value="3,6,0,0"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="Border.Background" Value="#81444444"/>
                            <Setter TargetName="QatTopHostLeftBorder" Property="Border.BorderBrush" Value="#69EEEEEE"/>
                            <Setter TargetName="QatTopHostRightBorder" Property="FrameworkElement.Margin" Value="0,6,1,0"/>
                            <Setter TargetName="QatTopHostRightBorder" Property="Border.Background" Value="#81444444"/>
                            <Setter TargetName="QatTopHostRightBorder" Property="Border.BorderBrush" Value="#69EEEEEE"/>
                        </DataTrigger>
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.UxThemeName)}" Value="Aero"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RibbonWindow}, Path=WindowState}"
                                   Value="Maximized"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="QatTopHost" Property="FrameworkElement.Margin" Value="0"/>
                        </MultiDataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="î" TargetType="{x:Type RibbonApplicationMenuItem}">
        <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2"
            SnapsToDevicePixels="true">
            <Grid Margin="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition Width="*" MinWidth="44"/>
                    <ColumnDefinition Width="22"/>
                </Grid.ColumnDefinitions>
                <Image x:Name="Image" Margin="6,4,6,4" Width="32" Height="32"
               Source="{TemplateBinding RibbonMenuItem.ImageSource}" VerticalAlignment="Center"
               HorizontalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
                Margin="1" Width="30" Height="30" CornerRadius="2">
                    <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                FlowDirection="LeftToRight" Data="{StaticResource ï}">
                        <UIElement.RenderTransform>
                            <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                        </UIElement.RenderTransform>
                    </Path>
                </Border>
                <ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Left"
                          Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                <Path x:Name="Arrow" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center"
              Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource ð}"
              Visibility="{TemplateBinding HasItems, Converter={StaticResource à}}"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Relative" Focusable="false" SnapsToDevicePixels="true"
               IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                    <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                          RenderOptions.ClearTypeHint="Enabled">
                        <Grid>
                            <Border x:Name="PopupBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                      CornerRadius="2"
                      BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                      Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Border x:Name="PopupOverlayBorder" BorderBrush="{StaticResource ë}"
                      Background="{StaticResource í}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer" CanContentScroll="true" HorizontalScrollBarVisibility="Disabled"
                                Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                   Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                                <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                   Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                      KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                        </Grid>
                                    </ScrollViewer>
                                    <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                          BorderThickness="0,1,0,0"
                          BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                        <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                    </Border>
                                </Grid>
                            </Border>
                        </Grid>
                    </classic:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsCheckable" Value="true">
                <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="Border" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PopupOverlayBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PopupOverlayBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ò" TargetType="{x:Type RibbonApplicationMenuItem}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2">
                <Grid Margin="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="44" SharedSizeGroup="MenuItemIconColumnGroup"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="22"/>
                    </Grid.ColumnDefinitions>
                    <Image x:Name="Image" Margin="6,4,6,4" Width="32" Height="32"
                 Source="{TemplateBinding RibbonMenuItem.ImageSource}" VerticalAlignment="Center"
                 HorizontalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                    <Border x:Name="CheckMarkBorder"
                  Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                  BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                  BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
                  Margin="1" Width="30" Height="30" CornerRadius="2">
                        <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                  HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                  FlowDirection="LeftToRight" Data="{StaticResource ï}">
                            <UIElement.RenderTransform>
                                <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                            </UIElement.RenderTransform>
                        </Path>
                    </Border>
                    <ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Left"
                            Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                    <Path x:Name="Arrow" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center"
                Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource ð}"
                Visibility="{TemplateBinding HasItems, Converter={StaticResource à}}"/>
                </Grid>
            </Border>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
             Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Grid>
                        <Border x:Name="PopupBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2"
                    BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                    Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="PopupOverlayBorder" BorderBrush="{StaticResource ë}"
                    Background="{StaticResource í}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer" CanContentScroll="true" HorizontalScrollBarVisibility="Disabled"
                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                            <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                            <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                    </Grid>
                                </ScrollViewer>
                                <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                        BorderThickness="0,1,0,0"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsCheckable" Value="true">
                <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PopupOverlayBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PopupOverlayBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_SubMenuScrollViewer"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.Foreground"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ô" TargetType="{x:Type RibbonApplicationMenuItem}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2">
                <Grid Margin="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                        <ColumnDefinition Width="4"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="37"/>
                        <ColumnDefinition Width="17"/>
                    </Grid.ColumnDefinitions>
                    <Image x:Name="Image" Margin="1" Width="16" Height="16"
                 Source="{TemplateBinding RibbonMenuItem.ImageSource}" VerticalAlignment="Center"
                 HorizontalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                    <Border x:Name="CheckMarkBorder"
                  Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                  BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                  BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
                  Margin="1" Width="20" Height="20" CornerRadius="2">
                        <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                  HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                  FlowDirection="LeftToRight" Data="{StaticResource ï}"/>
                    </Border>
                    <ContentPresenter Grid.Column="2" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Left"
                            Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                    <Path x:Name="Arrow" Grid.Column="5" VerticalAlignment="Center" Margin="4,0,0,0"
                Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource ð}"
                Visibility="{TemplateBinding HasItems, Converter={StaticResource à}}"/>
                </Grid>
            </Border>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
             Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Grid>
                        <Border x:Name="PopupBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2"
                    BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                    Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="PopupOverlayBorder" BorderBrush="{StaticResource ë}"
                    Background="{StaticResource í}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer" CanContentScroll="true"
                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                            <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                            <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                    </Grid>
                                </ScrollViewer>
                                <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                        BorderThickness="0,1,0,0"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsCheckable" Value="true">
                <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PopupOverlayBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PopupOverlayBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_SubMenuScrollViewer"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.Foreground"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RibbonApplicationMenuItem}">
        <Setter Property="Control.HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Padding" Value="3,2,3,2"/>
        <Setter Property="RibbonMenuItem.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonMenuItem.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonMenuItem.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonMenuItem.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonControlService.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonControlService.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="Control.Template" Value="{StaticResource î}"/>
        <Style.Triggers>
            <Trigger Property="RibbonApplicationMenuItem.Level" Value="Middle">
                <Setter Property="Control.Template" Value="{StaticResource ò}"/>
            </Trigger>
            <Trigger Property="RibbonApplicationMenuItem.Level" Value="Sub">
                <Setter Property="Control.Template" Value="{StaticResource ô}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="þ" TargetType="{x:Type RibbonButton}">
        <Border x:Name="OuterBorder" CornerRadius="{TemplateBinding RibbonButton.CornerRadius}"
            Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
            <Border x:Name="InnerBorder" BorderBrush="Transparent"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Padding="{TemplateBinding Control.Padding}"
              CornerRadius="{TemplateBinding RibbonButton.CornerRadius}">
                <StackPanel x:Name="StackPanel">
                    <Image x:Name="PART_Image" Source="{TemplateBinding RibbonButton.LargeImageSource}"
                 Width="32" Height="32" RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                 HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}}"/>
                    <Grid x:Name="Grid" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonButton.Label}"
                                      TextAlignment="Center" VerticalAlignment="Top" HorizontalAlignment="Center" LineHeight="13px"
                                      LineStackingStrategy="BlockLineHeight" Margin="1,1,1,0"/>
                    </Grid>
                </StackPanel>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Value="Large"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                <Setter Property="FrameworkElement.Height" Value="66"/>
                <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
                <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
            </DataTrigger>
            <DataTrigger Value="Small"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter Property="FrameworkElement.Height" Value="22"/>
                <Setter TargetName="PART_Image" Property="FrameworkElement.Margin" Value="1,0,1,0"/>
                <Setter TargetName="PART_Image"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                        Property="Image.Source"/>
                <Setter TargetName="PART_Image" Property="FrameworkElement.Width" Value="16"/>
                <Setter TargetName="PART_Image" Property="FrameworkElement.Height" Value="16"/>
                <Setter TargetName="TwoLineText" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
                <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="1"/>
                <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                             Value="Small"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Height" Value="Auto"/>
            </MultiDataTrigger>
            <DataTrigger Value="False"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
                <Setter TargetName="TwoLineText" Property="UIElement.Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Value="Collapsed"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter TargetName="PART_Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="RibbonButton.IsInControlGroup" Value="true">
                <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="OuterBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, FallbackValue=false}"
                             Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RibbonButton}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="RibbonButton.CornerRadius" Value="2"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="RibbonButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonButton.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="Control.Template" Value="{StaticResource þ}"/>
        <Setter Property="RibbonButton.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Thickness Left="1" Top="1" Right="1" Bottom="2"
                         x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}"/>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type RibbonControlGroup}">
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonControlGroup}">
                    <Border x:Name="MainBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="1,1,0,1" CornerRadius="2" SnapsToDevicePixels="true">
                        <ItemsPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainBorder" Property="Border.CornerRadius" Value="0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Ċ" Color="#FFB5BEDE"/>
    <LinearGradientBrush x:Key="ċ" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#FFE7E7F7"/>
        <GradientStop Offset="1" Color="White"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Č" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#80F7F7FF"/>
        <GradientStop Offset="1" Color="#F0F7F7FF"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="č" x:Shared="false" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}"/>
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}"/>
        <GradientStop Offset="0.5"
                  Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}"/>
        <GradientStop Offset="1"
                  Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ď" x:Shared="false" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0"
                  Color="{DynamicResource {x:Static SystemColors.ControlDarkDarkColorKey}}"/>
        <GradientStop Offset="0.5"
                  Color="{DynamicResource {x:Static SystemColors.ControlDarkDarkColorKey}}"/>
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
        <GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type RibbonCheckBox}">
        <Setter Property="Control.Background" Value="{StaticResource ċ}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource Ċ}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="RibbonCheckBox.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonCheckBox.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonCheckBox.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonCheckBox.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonCheckBox.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonCheckBox.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonCheckBox.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonCheckBox.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="RibbonCheckBox.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonCheckBox}">
                    <Border x:Name="MainBorder" Margin="1">
                        <StackPanel x:Name="StackPanel" Background="Transparent" Orientation="Vertical" Margin="1"
                        SnapsToDevicePixels="true">
                            <Image x:Name="Image" Source="{TemplateBinding RibbonCheckBox.LargeImageSource}"
                     RenderOptions.BitmapScalingMode="NearestNeighbor" Height="32" Width="32" Margin="1"
                     VerticalAlignment="Center"
                     HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                            <Grid x:Name="Grid" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="Center">
                                <Grid VerticalAlignment="Top" HorizontalAlignment="Center" Margin="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <Border x:Name="PART_CheckBorder" Background="White"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" Height="13" Width="13">
                                            <Grid>
                                                <Border x:Name="MiddleBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                                Background="{TemplateBinding Control.Background}" BorderThickness="1" Margin="1"/>
                                                <Border x:Name="InnerBorder" Background="Transparent" BorderBrush="{StaticResource Č}"
                                BorderThickness="1" Margin="1"/>
                                                <Path x:Name="CheckMark"
                              Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Fill="{TemplateBinding Control.Foreground}" StrokeThickness="0.4"
                              Data="{StaticResource ï}" FlowDirection="LeftToRight" Opacity="0"/>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                    <Image x:Name="SmallImage" Grid.Column="1"
                         Source="{TemplateBinding RibbonCheckBox.SmallImageSource}"
                         RenderOptions.BitmapScalingMode="NearestNeighbor" Height="16" Width="16" Margin="2,0,1,0"
                         VerticalAlignment="Center"
                         HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                         Visibility="Collapsed"/>
                                    <Grid x:Name="TwoLineTextPanel" Column="2" VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonCheckBox.Label}"
                                              TextAlignment="Center" LineHeight="13px" LineStackingStrategy="BlockLineHeight" Margin="5,0,5,0"/>
                                        <Rectangle x:Name="FocusVisual" Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2"
                               Visibility="Collapsed"/>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Large"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                            <Setter Property="FrameworkElement.Height" Value="66"/>
                            <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
                            <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
                        </DataTrigger>
                        <DataTrigger Value="Small"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Property="FrameworkElement.MinWidth" Value="22"/>
                            <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="SmallImage" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="2,0,2,0"/>
                            <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
                            <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="false"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Small"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="FrameworkElement.Height" Value="Auto"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="False"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
                            <Setter TargetName="TwoLineTextPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Value="Collapsed"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="SmallImage" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="SmallImage" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="PART_CheckBorder" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="MainBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="PART_CheckBorder" Value="{DynamicResource č}" Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_CheckBorder" Value="{DynamicResource Ď}" Property="Border.Background"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="CheckMark"
                              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                              Property="Shape.Fill"/>
                            <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="FocusVisual"
                              Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                              Property="Shape.Stroke"/>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </TriggerBase.ExitActions>
                            <Setter TargetName="PART_CheckBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <Trigger Property="RibbonCheckBox.ShowKeyboardCues" Value="true">
                            <Setter TargetName="FocusVisual" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ď}" Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ď}" Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ButtonBase.IsPressed" Value="true"/>
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ď}" Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="RibbonCheckBox.IsInControlGroup" Value="true">
                            <Setter TargetName="MainBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CheckMark" Property="UIElement.Opacity" Value="1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonFilterMenuButton}">
        <Style.Resources>
            <SolidColorBrush x:Key="đ" Color="#959595"/>
            <SolidColorBrush x:Key="Ē" Color="#FFD232"/>
        </Style.Resources>
        <Setter Property="Control.Foreground" Value="White"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Background" Value="{StaticResource đ}"/>
        <Setter Property="RibbonMenuButton.MouseOverBorderBrush" Value="{x:Null}"/>
        <Setter Property="RibbonMenuButton.MouseOverBackground" Value="{x:Null}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Control.Padding" Value="6,0,0,0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonFilterMenuButton}">
                    <FrameworkTemplate.Resources>
                        <ControlTemplate x:Key="ē" TargetType="{x:Type RibbonToggleButton}">
                            <Grid SnapsToDevicePixels="true">
                                <Border x:Name="OuterBorder" CornerRadius="2,2,0,0"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}">
                                    <Grid Margin="{TemplateBinding Control.Padding}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <RibbonMenuItem x:Name="PART_CurrentFilterItem" IsHitTestVisible="false" Focusable="false">
                                            <Control.Template>
                                                <ControlTemplate TargetType="{x:Type RibbonMenuItem}">
                                                    <Border Background="{TemplateBinding Control.Background}"
                                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                                                        <ContentPresenter ContentSource="Header"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Control.Template>
                                        </RibbonMenuItem>
                                        <RibbonTwoLineText x:Name="TwoLineText" Grid.Column="1" VerticalAlignment="Top" HorizontalAlignment="Left"
                                              LineHeight="13px" LineStackingStrategy="BlockLineHeight"
                                              PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                                              PathFill="{TemplateBinding Control.Foreground}"
                                              PathStroke="{TemplateBinding Control.Foreground}" Margin="1"/>
                                    </Grid>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </FrameworkTemplate.Resources>
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <RibbonToggleButton x:Name="PART_ToggleButton" RibbonTwoLineText.PathData="{StaticResource Ð}"
                                       Label="{TemplateBinding RibbonMenuButton.Label}"
                                       LargeImageSource="{TemplateBinding RibbonMenuButton.LargeImageSource}"
                                       SmallImageSource="{TemplateBinding RibbonMenuButton.SmallImageSource}"
                                       Foreground="{TemplateBinding Control.Foreground}"
                                       BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1"
                                       Background="{TemplateBinding Control.Background}"
                                       MouseOverBorderBrush="{TemplateBinding RibbonMenuButton.MouseOverBorderBrush}"
                                       MouseOverBackground="{TemplateBinding RibbonMenuButton.MouseOverBackground}"
                                       CheckedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                       CheckedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                       FocusedBorderBrush="{TemplateBinding RibbonMenuButton.FocusedBorderBrush}"
                                       FocusedBackground="{TemplateBinding RibbonMenuButton.FocusedBackground}"
                                       HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                       Padding="{TemplateBinding Control.Padding}" ClickMode="Press"
                                       Template="{StaticResource ē}" Style="{x:Null}"
                                       IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"/>
                        <Popup x:Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
                   Placement="Bottom" Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   TextElement.Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RibbonGallery}}, Path=Foreground}"
                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}">
                            <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                              KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled">
                                <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        CornerRadius="2"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                                    <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" BorderThickness="0"
                          CornerRadius="2">
                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer" Margin="1"
                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                    <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                     Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                     Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                     Fill="{Binding ElementName=MenuBorder, Path=Background}"/>
                                                    <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                     Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                     Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                     Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                            <Setter TargetName="PART_SubMenuScrollViewer"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Control.Foreground"/>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
                <Setter Property="Control.Background"
                        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Foreground" Value="{StaticResource Ē}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background"
                        Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Foreground" Value="{StaticResource Ē}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Background"
                        Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Control.Foreground"
                        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type RibbonGallery}">
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="Control.Background"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}"/>
        <Setter Property="Control.BorderThickness" Value="0,1"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="RibbonGallery.CommandParameter"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}"/>
        <Setter Property="RibbonGallery.PreviewCommandParameter"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=HighlightedItem}"/>
        <Setter Property="ItemsControl.ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <rp:RibbonGalleryCategoriesPanel Name="ItemsHostPanel" IsItemsHost="true"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonGallery}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <Border x:Name="InnerBorder" Background="{StaticResource Ñ}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Grid x:Name="FilterHost">
                                    <ContentPresenter x:Name="PART_FilterContentPane" ContentSource="FilterPaneContent"/>
                                    <RibbonFilterMenuButton x:Name="PART_FilterMenuButton"
                                                 Style="{TemplateBinding RibbonGallery.FilterMenuButtonStyle}"
                                                 ItemContainerStyleSelector="{TemplateBinding RibbonGallery.FilterItemContainerStyleSelector}"
                                                 ItemTemplateSelector="{TemplateBinding RibbonGallery.FilterItemTemplateSelector}"
                                                 HorizontalContentAlignment="Left" Visibility="Collapsed"/>
                                </Grid>
                                <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="1" Padding="{TemplateBinding Control.Padding}"
                              Focusable="false">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect" Height="{Binding ElementName=Border, Path=ActualHeight}"
                                 Width="{Binding ElementName=Border, Path=ActualWidth}"
                                 Fill="{Binding ElementName=Border, Path=Background}"/>
                                            <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ñ}"
                                 Height="{Binding ElementName=Border, Path=ActualHeight}"
                                 Width="{Binding ElementName=Border, Path=ActualWidth}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Continue"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_ScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect" Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect" Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                              Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="RibbonGallery.CanUserFilter" Value="false">
                            <Setter TargetName="FilterHost" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Value="{x:Null}" Property="RibbonGallery.FilterPaneContent"/>
                                <Condition Value="{x:Null}" Property="RibbonGallery.FilterPaneContentTemplate"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_FilterMenuButton" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_FilterContentPane" Property="UIElement.Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Ĕ" Color="#0C000000"/>
    <Style TargetType="{x:Type RibbonGalleryCategory}">
        <Setter Property="Control.Background" Value="{StaticResource Ĕ}"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="ItemsControl.ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <rp:RibbonGalleryItemsPanel Name="ItemsHostPanel" IsItemsHost="true"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonGalleryCategory}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="HeaderBorder" CornerRadius="2" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}"
                    Visibility="{TemplateBinding RibbonGalleryCategory.HeaderVisibility}">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="HeaderBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="HeaderBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="HeaderBorder" Property="Border.CornerRadius" Value="0"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ĕ" Color="#30FFFFFF"/>
    <SolidColorBrush x:Key="Ė" Color="#FF3F3F3F"/>
    <Style TargetType="{x:Type RibbonGalleryItem}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="RibbonGalleryItem.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonGalleryItem.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonGalleryItem.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonGalleryItem.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonGalleryItem.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonGalleryItem.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="UIElement.Focusable" Value="true"/>
        <Setter Property="Control.HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Padding" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonGalleryItem}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Border x:Name="OuterBorder" CornerRadius="2" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}">
                            <Border x:Name="InnerBorder" CornerRadius="2" Background="Transparent" BorderBrush="Transparent"
                      BorderThickness="{TemplateBinding Control.BorderThickness}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="2"
                                  RecognizesAccessKey="true"/>
                            </Border>
                        </Border>
                        <Border x:Name="PressedStateOverlay" CornerRadius="2" HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="MainGrid" Value="{StaticResource Ė}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="PressedStateOverlay" Property="Border.CornerRadius" Value="0"/>
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonGalleryItem.IsHighlighted" Value="true"/>
                                <Condition Property="RibbonGalleryItem.IsPressed" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <Trigger Property="RibbonGalleryItem.IsPressed" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PressedStateOverlay" Value="{StaticResource ĕ}" Property="Border.Background"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PressedStateOverlay" Value="{StaticResource ĕ}" Property="Border.Background"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <Trigger Property="RibbonGalleryItem.IsSelected" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonGalleryItem.IsHighlighted" Value="true"/>
                                <Condition Property="RibbonGalleryItem.IsSelected" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ď}" Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="InnerBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ė" Color="#50FFFFFF"/>
    <RadialGradientBrush x:Key="Ę" GradientOrigin="0.5,1" Center="0.5,0.5" RadiusX="1" RadiusY="0.5">
        <GradientStop Offset="0" Color="#30FFFFFF"/>
        <GradientStop Offset="1" Color="#08808080"/>
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="ę" GradientOrigin="0.5,0.95" Center="0.5,1" RadiusX="0.9" RadiusY="0.5">
        <GradientStop Offset="0" Color="#AAFFFFFF"/>
        <GradientStop Offset="1" Color="#40BBBBBB"/>
    </RadialGradientBrush>
    <SolidColorBrush x:Key="Ě" Color="#40FFFFFF"/>
    <LinearGradientBrush x:Key="ě" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#88FFFFFF" Offset="0.0"/>
        <GradientStop Color="#88DBE7F4" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Ĝ" Color="#AEBECF"/>
    <SolidColorBrush x:Key="ĝ" Color="#FCFCFC"/>
    <SolidColorBrush x:Key="Ğ" Color="Transparent"/>
    <LinearGradientBrush x:Key="ğ" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#F5F9FD" Offset="0"/>
        <GradientStop Color="#EDF1F5" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ġ" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#80FFFFFF"/>
        <GradientStop Offset="0.5" Color="#60FFFFFF"/>
        <GradientStop Offset="1" Color="#40808080"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ġ" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#80808080"/>
        <GradientStop Offset="1" Color="#80FFFFFF"/>
    </LinearGradientBrush>
    <Style x:Key="Ģ" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="UIElement.Focusable" Value="true"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonGroup}}, Path=BorderBrush}"/>
        <Setter Property="RibbonToggleButton.MouseOverBorderBrush" Value="Transparent"/>
        <Setter Property="RibbonToggleButton.MouseOverBackground" Value="{StaticResource Ě}"/>
        <Setter Property="RibbonToggleButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="RibbonToggleButton.FocusedBorderBrush" Value="Transparent"/>
        <Setter Property="RibbonToggleButton.CheckedBackground" Value="Transparent"/>
        <Setter Property="RibbonToggleButton.CheckedBorderBrush" Value="Transparent"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <FrameworkTemplate.Resources>
                        <DataTemplate DataType="{x:Type system:String}">
                            <RibbonTwoLineText Margin="2,4,2,0" TextAlignment="Center" VerticalAlignment="Top" LineHeight="13px"
                                        LineStackingStrategy="BlockLineHeight"
                                        HasTwoLines="{TemplateBinding RibbonTwoLineText.HasTwoLines}"
                                        PathFill="{TemplateBinding TextElement.Foreground}"
                                        PathData="{TemplateBinding RibbonTwoLineText.PathData}" Text="{Binding}"/>
                        </DataTemplate>
                    </FrameworkTemplate.Resources>
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Border x:Name="ButtonInnerBorder" CornerRadius="2" BorderThickness="1" Margin="1" BorderBrush="#EAF1FB"/>
                        <Border x:Name="ButtonOuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" CornerRadius="2" BorderThickness="1"/>
                        <Border x:Name="PART_HotBackground" Opacity="0" CornerRadius="2" BorderThickness="1"
                    Background="{TemplateBinding RibbonToggleButton.MouseOverBackground}"
                    BorderBrush="{TemplateBinding RibbonToggleButton.MouseOverBorderBrush}"/>
                        <Grid Margin="2">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Border x:Name="ImageOuterBorder" Grid.Row="0">
                                <Border x:Name="ImageMiddleBorder" Margin="3" VerticalAlignment="Top" HorizontalAlignment="Center"
                        BorderBrush="{StaticResource Ĝ}" BorderThickness="0" Width="32" Height="32"
                        CornerRadius="3">
                                    <Grid>
                                        <Border x:Name="ImageInnerBorder" BorderBrush="{StaticResource ĝ}" BorderThickness="0"
                            CornerRadius="3"/>
                                        <Image x:Name="GroupImage" Source="{TemplateBinding RibbonToggleButton.LargeImageSource}"
                           Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center"
                           RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                                    </Grid>
                                </Border>
                            </Border>
                            <Border x:Name="LabelBorder" Grid.Row="1" Grid.RowSpan="2" Background="{StaticResource Ę}">
                                <ContentPresenter RibbonTwoLineText.HasTwoLines="true"
                                  RibbonTwoLineText.PathData="{StaticResource Ð}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="RibbonToggleButton.LargeImageSource">
                            <Setter TargetName="GroupImage"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                              Property="Image.Source"/>
                            <Setter TargetName="GroupImage" Property="FrameworkElement.Width" Value="16"/>
                            <Setter TargetName="GroupImage" Property="FrameworkElement.Height" Value="16"/>
                            <Setter TargetName="ImageMiddleBorder" Property="Border.BorderThickness" Value="1"/>
                            <Setter TargetName="ImageMiddleBorder" Value="{StaticResource ě}" Property="Border.Background"/>
                            <Setter TargetName="ImageInnerBorder" Property="Border.BorderThickness" Value="1"/>
                            <Setter TargetName="ImageInnerBorder" Value="{StaticResource ė}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="GroupImage" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="ImageMiddleBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="ImageMiddleBorder" Property="Border.BorderThickness" Value="0"/>
                            <Setter TargetName="ImageInnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="ImageInnerBorder" Property="Border.BorderThickness" Value="0"/>
                            <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="LabelBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="ButtonOuterBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="ButtonOuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="ButtonOuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="ButtonInnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="ButtonInnerBorder" Property="Border.BorderThickness" Value="0,1,0,0"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ButtonInnerBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="ButtonInnerBorder" Property="Border.BorderThickness" Value="1"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ButtonInnerBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="ButtonInnerBorder" Property="Border.BorderThickness" Value="1"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ButtonOuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_HotBackground" Property="UIElement.Opacity" Value="1"/>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HotBackground" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="PART_HotBackground"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_HotBackground"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HotBackground" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="PART_HotBackground"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_HotBackground"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="ImageOuterBorder" Property="Border.Background" Value="#20BBBBBB"/>
                            <Setter TargetName="LabelBorder" Value="{StaticResource ę}" Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ģ" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
        <Setter Property="UIElement.Focusable" Value="true"/>
        <Setter Property="Control.BorderBrush" Value="#80808080"/>
        <Setter Property="Control.Background" Value="#AAFFFFFF"/>
        <Setter Property="RibbonToggleButton.MouseOverBorderBrush" Value="Transparent"/>
        <Setter Property="RibbonToggleButton.MouseOverBackground" Value="{StaticResource Ġ}"/>
        <Setter Property="RibbonToggleButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="RibbonToggleButton.FocusedBorderBrush" Value="Transparent"/>
        <Setter Property="RibbonToggleButton.CheckedBackground" Value="{StaticResource ġ}"/>
        <Setter Property="RibbonToggleButton.CheckedBorderBrush" Value="Transparent"/>
        <Setter Property="FrameworkElement.Margin" Value="0,-1,0,0"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Border Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1"
                  CornerRadius="3" Background="{TemplateBinding Control.Background}">
                        <Grid>
                            <Border Name="InnerBorder" CornerRadius="3"
                      Background="{TemplateBinding RibbonToggleButton.MouseOverBackground}"
                      BorderBrush="{TemplateBinding RibbonToggleButton.MouseOverBorderBrush}" Opacity="0"/>
                            <Image Name="GroupImage" Margin="3,2"
                     Source="{TemplateBinding RibbonToggleButton.SmallImageSource}" Width="16"
                     Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"
                     RenderOptions.BitmapScalingMode="{TemplateBinding RenderOptions.BitmapScalingMode}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="GroupImage" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="InnerBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="#AA808080"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="Ĥ" TargetType="{x:Type RibbonGroup}">
        <Border Name="GroupBorder" Background="{TemplateBinding Control.Background}" Margin="1,2,0,0">
            <Grid x:Name="MainGrid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="16"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border Name="PART_HotBackground"
                Background="{TemplateBinding RibbonGroup.MouseOverBackground}"
                BorderBrush="{TemplateBinding RibbonGroup.MouseOverBorderBrush}" Opacity="0"
                Grid.RowSpan="3" CornerRadius="2" BorderThickness="1" SnapsToDevicePixels="true"/>
                <Border Name="SeparatorBorder" Background="{TemplateBinding Control.BorderBrush}" Grid.Column="1"
                Grid.RowSpan="3" Height="75" Width="1" VerticalAlignment="Center" SnapsToDevicePixels="true"/>
                <Border Margin="2,1,2,0" Padding="3,0,3,0">
                    <Grid>
                        <ItemsPresenter Name="ItemsPresenter"/>
                        <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="false"/>
                    </Grid>
                </Border>
                <Border Name="LabelSeparatorBorder" Grid.Row="1" Height="1" Margin="5,1,5,-1"/>
                <Grid Margin="2,0,2,0" Row="2">
                    <ContentPresenter Name="PART_Header" TextElement.Foreground="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" ContentSource="Header"
                            Margin="2,0,2,0" MaxHeight="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="SeparatorBorder" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="GroupBorder" Property="Border.BorderThickness" Value="1"/>
                <Setter TargetName="GroupBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="GroupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="LabelSeparatorBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                        Property="Border.Background"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ĥ" TargetType="{x:Type RibbonGroup}">
        <Grid x:Name="MainGrid">
            <RibbonToggleButton x:Name="PART_ToggleButton" Margin="0,3,0,0" Style="{StaticResource Ģ}"
                                 Content="{TemplateBinding HeaderedItemsControl.Header}"
                                 ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                 ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                 Background="{TemplateBinding Control.Background}"
                                 LargeImageSource="{TemplateBinding RibbonGroup.LargeImageSource}"
                                 SmallImageSource="{TemplateBinding RibbonGroup.SmallImageSource}"
                                 IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             PlacementTarget="{Binding ElementName=PART_ToggleButton}"
             IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome FrameworkElement.Name="Shdw" Color="Transparent" UIElement.SnapsToDevicePixels="true"
                                        CornerRadius="2" UIElement.Focusable="true" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled" FrameworkElement.FocusVisualStyle="{x:Null}">
                    <Grid Name="PART_PopupGrid" Height="{TemplateBinding FrameworkElement.ActualHeight}"
                Margin="0,1.5,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto" MinHeight="16"/>
                        </Grid.RowDefinitions>
                        <Border Name="PopupBorder" Grid.RowSpan="2" Background="{TemplateBinding Control.Background}"
                    BorderThickness="1"
                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"/>
                        <Border Name="PART_HotBackground"
                    Background="{TemplateBinding RibbonGroup.MouseOverBackground}"
                    BorderBrush="{TemplateBinding RibbonGroup.MouseOverBorderBrush}" Opacity="0"
                    Grid.RowSpan="2" CornerRadius="2" BorderThickness="1" SnapsToDevicePixels="true"/>
                        <Border Margin="2,3.5,2,0" Padding="3,0,3,0">
                            <Grid>
                                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="true"
                                Grid.IsSharedSizeScope="true"/>
                                <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="false"/>
                            </Grid>
                        </Border>
                        <Grid Margin="2,0,2,1" Row="1">
                            <ContentPresenter Name="PART_Header" TextElement.Foreground="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" ContentSource="Header"
                                Margin="2,0,2,0" MaxHeight="15" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                    <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PopupBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        Property="Border.Background"/>
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="Shdw" Property="classic:SystemDropShadowChrome.CornerRadius" Value="0"/>
            </DataTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="RibbonGroup.IsInQuickAccessToolBar" Value="true">
                <Setter TargetName="PART_PopupGrid" Value="{StaticResource ß}"
                        Property="FrameworkElement.Height"/>
                <Setter TargetName="PART_ToggleButton" Value="{StaticResource ģ}"
                        Property="FrameworkElement.Style"/>
                <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
            <Trigger Property="RibbonGroup.IsDropDownOpen" Value="true">
                <Setter TargetName="MainGrid" Property="ToolTipService.IsEnabled" Value="false"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RibbonGroup}">
        <Setter Property="FrameworkElement.Margin" Value="1"/>
        <Setter Property="Control.Padding" Value="3,0,3,0"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template" Value="{StaticResource Ĥ}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="RibbonGroup.MouseOverBackground" Value="{StaticResource Ğ}"/>
        <Setter Property="RibbonGroup.MouseOverBorderBrush" Value="Transparent"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Style.Triggers>
            <Trigger Property="RibbonGroup.IsCollapsed" Value="true">
                <Setter Property="Control.Template" Value="{StaticResource ĥ}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <LinearGradientBrush x:Key="ì" EndPoint="0.971,0.5" StartPoint="0.042,0.5">
        <GradientStop Color="#20FFFFFF" Offset="0" />
        <GradientStop Color="#13FFFFFF" Offset="1" />
        <GradientStop Color="#13FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
        <GradientStop Color="#00FFFFFF" Offset="0.856" />
    </LinearGradientBrush>
    <Style TargetType="{x:Type RibbonMenuItem}">
        <Setter Property="Control.HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Padding" Value="3,2,3,2"/>
        <Setter Property="RibbonMenuItem.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonMenuItem.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonMenuItem.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonMenuItem.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonControlService.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonControlService.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonMenuItem}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="PART_SideBarBorder" Margin="0,-1,0,-1" BorderThickness="0,0,1,0"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                    <Grid x:Name="SideBarOverlay" Background="{StaticResource ì}">
                                        <Image x:Name="Image" Width="16" Height="16" Margin="4,3,6,1" VerticalAlignment="Center"
                           HorizontalAlignment="Center" Source="{TemplateBinding RibbonMenuItem.ImageSource}"/>
                                        <Border x:Name="CheckMarkBorder"
                            Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                            BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                            BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
                            Margin="1" Width="20" Height="20" CornerRadius="2">
                                            <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                            HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                            FlowDirection="LeftToRight" Data="{StaticResource ï}"/>
                                        </Border>
                                    </Grid>
                                </Border>
                                <ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                                <Path x:Name="Arrow" Visibility="Collapsed" Grid.Column="2" VerticalAlignment="Center"
                      HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="{StaticResource ð}"/>
                            </Grid>
                        </Border>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
                   Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                              RenderOptions.ClearTypeHint="Enabled">
                                <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        CornerRadius="2"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                                    <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                       Fill="{Binding ElementName=MenuBorder, Path=Background}"/>
                                                        <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" Margin="2" Grid.IsSharedSizeScope="true"
                                          KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                                </Grid>
                                            </ScrollViewer>
                                            <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                              BorderThickness="0,1,0,0"
                              BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                                <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                            </Border>
                                        </Grid>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                              Value="Disabled"/>
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                              Value="Disabled"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ItemsControl.HasItems" Value="true"/>
                                <Condition Property="MenuItem.IsCheckable" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsCheckable" Value="true">
                            <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsChecked" Value="true">
                            <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsPressed" Value="true">
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="Shape.Fill"/>
                            <Setter TargetName="Border" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="CheckMark"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="Shape.Fill"/>
                            <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                            <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="CheckMarkBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="CheckMarkBorder"
                              Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                            <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="PART_SideBarBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_SubMenuScrollViewer"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Control.Foreground"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                            <Setter TargetName="CheckMark"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Shape.Fill"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="Shape.Fill"/>
                            <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="CheckMarkBorder"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="CheckMark"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonRadioButton}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="RibbonRadioButton.CornerRadius" Value="2"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="RibbonRadioButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonRadioButton.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonRadioButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonRadioButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonRadioButton.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonRadioButton.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonRadioButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonRadioButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="RibbonRadioButton.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonRadioButton}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="OuterBorder" CornerRadius="{TemplateBinding RibbonRadioButton.CornerRadius}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                        <Border x:Name="MiddleBorder"
                    CornerRadius="{TemplateBinding RibbonRadioButton.CornerRadius}"
                    Background="Transparent" BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding Control.BorderThickness}">
                            <Border x:Name="InnerBorder" Background="Transparent" BorderBrush="Transparent"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Padding="{TemplateBinding Control.Padding}"
                      CornerRadius="{TemplateBinding RibbonRadioButton.CornerRadius}">
                                <StackPanel x:Name="StackPanel"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                                    <Image x:Name="PART_Image" Source="{TemplateBinding RibbonRadioButton.LargeImageSource}"
                         Width="32" Height="32" Margin="1,1,1,2" RenderOptions.BitmapScalingMode="NearestNeighbor"
                         VerticalAlignment="Center"
                         HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                                    <Grid x:Name="Grid" VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonRadioButton.Label}"
                                              TextAlignment="Center" VerticalAlignment="Top" HorizontalAlignment="Center" LineHeight="13px"
                                              LineStackingStrategy="BlockLineHeight" Margin="1,1,1,0"/>
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Large"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                            <Setter Property="FrameworkElement.Height" Value="66"/>
                            <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
                            <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
                        </DataTrigger>
                        <DataTrigger Value="Small"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
                            <Setter TargetName="PART_Image" Property="FrameworkElement.Margin" Value="1,0,1,0"/>
                            <Setter TargetName="PART_Image"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                              Property="Image.Source"/>
                            <Setter TargetName="PART_Image" Property="FrameworkElement.Width" Value="16"/>
                            <Setter TargetName="PART_Image" Property="FrameworkElement.Height" Value="16"/>
                            <Setter TargetName="TwoLineText" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
                            <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="1"/>
                            <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Small"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="FrameworkElement.Height" Value="Auto"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="False"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
                            <Setter TargetName="TwoLineText" Value="{x:Null}" Property="RibbonTwoLineText.Text"/>
                        </DataTrigger>
                        <DataTrigger Value="Collapsed"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter TargetName="PART_Image" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="PART_Image" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ButtonBase.IsPressed" Value="true"/>
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="RibbonRadioButton.IsInControlGroup" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="MiddleBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ĩ" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFFFFFF"/>
        <GradientStop Offset="0.19" Color="#AAFFFFFF"/>
        <GradientStop Offset="0.39" Color="#77FFFFFF"/>
        <GradientStop Offset="0.39" Color="#77FFFFFF"/>
        <GradientStop Offset="0.79" Color="#AAFFFFFF"/>
        <GradientStop Offset="1" Color="#FFFFFFFF"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type RibbonSplitButton}">
        <Style.Resources>
            <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="UIElement.Focusable" Value="false"/>
                <Setter Property="Control.BorderBrush"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}"/>
                <Setter Property="Control.Background"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}"/>
                <Setter Property="Control.FontWeight" Value="Bold"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border x:Name="MainBorder" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                                <Border x:Name="Overlay" Background="{StaticResource ì}">
                                    <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="Text"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="TextBlock.Foreground"/>
                                    <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                  Property="Border.Background"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="14"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="SideBarBorder" BorderThickness="0,0,1,0" Margin="0,-1,0,-1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                                            <Border x:Name="SideBarOverlay" Background="{StaticResource ì}"/>
                                        </Border>
                                        <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" Margin="2,0,0,0" X1="0" Y1="0" X2="1" Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                            <Setter TargetName="SideBarBorder" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="SideBarBorder"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Border.BorderBrush"/>
                                            <Setter TargetName="SideBarOverlay" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="Line"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Shape.Stroke"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="2,0,2,0"/>
        <Setter Property="RibbonMenuButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonMenuButton.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonMenuButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonMenuButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonSplitButton.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonSplitButton.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonMenuButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonMenuButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="ToolTipService.IsEnabled" Value="false"/>
        <Setter Property="RibbonMenuButton.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonSplitButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Border x:Name="OuterBorder" Background="{TemplateBinding Control.Background}" CornerRadius="2">
                            <Border x:Name="InnerBorder" Background="Transparent" CornerRadius="2">
                                <StackPanel x:Name="StackPanel" Orientation="Horizontal">
                                    <RibbonButton x:Name="PART_HeaderButton" Template="{StaticResource þ}"
                                       Label="{TemplateBinding RibbonMenuButton.Label}"
                                       LargeImageSource="{TemplateBinding RibbonMenuButton.LargeImageSource}"
                                       SmallImageSource="{TemplateBinding RibbonMenuButton.SmallImageSource}"
                                       BorderBrush="{TemplateBinding Control.BorderBrush}"
                                       BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                                       CornerRadius="2,0,0,2" Focusable="false"
                                       ToolTipTitle="{TemplateBinding RibbonMenuButton.ToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding RibbonMenuButton.ToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding RibbonMenuButton.ToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding RibbonMenuButton.ToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding RibbonMenuButton.ToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding RibbonMenuButton.ToolTipFooterImageSource}"
                                       MouseOverBorderBrush="{TemplateBinding RibbonMenuButton.MouseOverBorderBrush}"
                                       MouseOverBackground="{TemplateBinding RibbonMenuButton.MouseOverBackground}"
                                       PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                       PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                       HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                       VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                       Padding="{TemplateBinding Control.Padding}"
                                       Command="{TemplateBinding RibbonSplitButton.Command}"
                                       CommandParameter="{TemplateBinding RibbonSplitButton.CommandParameter}"
                                       CommandTarget="{TemplateBinding RibbonSplitButton.CommandTarget}"
                                       KeyTip="{TemplateBinding RibbonSplitButton.HeaderKeyTip}"
                                       QuickAccessToolBarId="{TemplateBinding RibbonSplitButton.HeaderQuickAccessToolBarId}"
                                       CanAddToQuickAccessToolBarDirectly="true"
                                       ToolTipService.InitialShowDelay="{StaticResource Í}"
                                       ToolTipService.ShowDuration="{StaticResource Î}"
                                       ToolTipService.BetweenShowDelay="{StaticResource Ï}" Style="{x:Null}">
                                        <RibbonButton.ControlSizeDefinition>
                                            <RibbonControlSizeDefinition ImageSize="Large" IsLabelVisible="false"/>
                                        </RibbonButton.ControlSizeDefinition>
                                        <RibbonButton.QuickAccessToolBarControlSizeDefinition>
                                            <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
                                        </RibbonButton.QuickAccessToolBarControlSizeDefinition>
                                        <FrameworkElement.Resources>
                                            <Thickness Left="1" Top="1" Right="1" Bottom="0"
                                         x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}"/>
                                        </FrameworkElement.Resources>
                                    </RibbonButton>
                                    <Grid>
                                        <Border x:Name="UnderlayBorder" Opacity="0.5" Visibility="Collapsed"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"/>
                                        <RibbonToggleButton x:Name="PART_ToggleButton" Template="{StaticResource Ħ}"
                                               Label="{TemplateBinding RibbonMenuButton.Label}"
                                               RibbonTwoLineText.PathData="{StaticResource Ð}"
                                               BorderBrush="{TemplateBinding Control.BorderBrush}" Background="Transparent"
                                               CornerRadius="0,2,2,0"
                                               MouseOverBorderBrush="{TemplateBinding RibbonMenuButton.MouseOverBorderBrush}"
                                               MouseOverBackground="{TemplateBinding RibbonMenuButton.MouseOverBackground}"
                                               PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                               PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                               CheckedBorderBrush="{TemplateBinding RibbonSplitButton.CheckedBorderBrush}"
                                               CheckedBackground="{TemplateBinding RibbonSplitButton.CheckedBackground}"
                                               FocusedBorderBrush="{TemplateBinding RibbonMenuButton.FocusedBorderBrush}"
                                               FocusedBackground="{TemplateBinding RibbonMenuButton.FocusedBackground}"
                                               HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                               VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                               Padding="{TemplateBinding Control.Padding}"
                                               ToolTipTitle="{TemplateBinding RibbonSplitButton.DropDownToolTipTitle}"
                                               ToolTipDescription="{TemplateBinding RibbonSplitButton.DropDownToolTipDescription}"
                                               ToolTipImageSource="{TemplateBinding RibbonSplitButton.DropDownToolTipImageSource}"
                                               ToolTipFooterTitle="{TemplateBinding RibbonSplitButton.DropDownToolTipFooterTitle}"
                                               ToolTipFooterDescription="{TemplateBinding RibbonSplitButton.DropDownToolTipFooterDescription}"
                                               ToolTipFooterImageSource="{TemplateBinding RibbonSplitButton.DropDownToolTipFooterImageSource}"
                                               ClickMode="Press" ToolTipService.InitialShowDelay="{StaticResource Í}"
                                               ToolTipService.ShowDuration="{StaticResource Î}"
                                               ToolTipService.BetweenShowDelay="{StaticResource Ï}" Style="{x:Null}"
                                               FocusVisualStyle="{x:Null}"
                                               IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}">
                                            <RibbonToggleButton.ControlSizeDefinition>
                                                <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="false"/>
                                            </RibbonToggleButton.ControlSizeDefinition>
                                        </RibbonToggleButton>
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>
                        <Popup x:Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
                   Placement="Bottom" Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}">
                            <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                              KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled">
                                <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        CornerRadius="2"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                                    <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" BorderThickness="0"
                          CornerRadius="2">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_SubMenuScrollViewer" Grid.Row="1" Margin="1"
                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                       Fill="{Binding ElementName=MenuBorder, Path=Background}"/>
                                                        <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                       Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                          KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                                </Grid>
                                            </ScrollViewer>
                                            <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                              BorderThickness="0,1,0,0"
                              BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                                <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                            </Border>
                                        </Grid>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
                            <Setter TargetName="PART_HeaderButton" Property="ToolTipService.IsEnabled" Value="false"/>
                            <Setter TargetName="PART_ToggleButton" Property="ToolTipService.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Property="RibbonMenuButton.HasGallery" Value="true">
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                              Value="Disabled"/>
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                              Value="Disabled"/>
                        </Trigger>
                        <DataTrigger Value="Large"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                            <Setter TargetName="PART_HeaderButton" Property="FrameworkElement.Height" Value="37"/>
                            <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Height" Value="29"/>
                            <Setter TargetName="PART_ToggleButton" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
                            <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Vertical"/>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CornerRadius" Value="2,2,0,0"/>
                            <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.CornerRadius" Value="0,0,2,2"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Large"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                   Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Small"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                   Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Small"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                   Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Small"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                   Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="true"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}">
                            <Setter TargetName="PART_HeaderButton" Property="FrameworkElement.Height" Value="Auto"/>
                            <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Height" Value="Auto"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Collapsed"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                   Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="false"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Collapsed"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                   Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="false"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                   Value="Collapsed"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                   Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ĩ}" Property="Border.Background"/>
                            <Setter TargetName="PART_ToggleButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Control.BorderBrush"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_ToggleButton" Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ĩ}" Property="Border.Background"/>
                            <Setter TargetName="PART_HeaderButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Control.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger SourceName="PART_ToggleButton" Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_HeaderButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="RibbonSplitButton.IsChecked" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_ToggleButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger SourceName="PART_ToggleButton" Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ĩ}" Property="Border.Background"/>
                            <Setter TargetName="PART_HeaderButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="RibbonMenuButton.IsInControlGroup" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.CornerRadius" Value="0"/>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CornerRadius" Value="0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
                            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger Value="{x:Null}" Property="RibbonSplitButton.HeaderQuickAccessToolBarId">
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CanAddToQuickAccessToolBarDirectly"
                              Value="false"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                              Property="Control.BorderBrush"/>
                            <Setter TargetName="UnderlayBorder" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ToggleButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Control.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CornerRadius" Value="0"/>
                            <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.CornerRadius" Value="0"/>
                            <Setter TargetName="UnderlayBorder" Property="UIElement.Opacity" Value="0"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="UnderlayBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="UnderlayBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_HeaderButton"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Control.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_ToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Control.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Control.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Control.BorderBrush"/>
                            <Setter TargetName="PART_ToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Control.BorderBrush"/>
                        </MultiDataTrigger>
                        <Trigger Property="RibbonMenuButton.IsInQuickAccessToolBar" Value="true">
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CanAddToQuickAccessToolBarDirectly"
                              Value="false"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="RibbonSplitButton.IsCheckable" Value="true">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSplitButton}">
                            <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                                <Border x:Name="OuterBorder" Background="{TemplateBinding Control.Background}" CornerRadius="2">
                                    <Border x:Name="InnerBorder" Background="Transparent" CornerRadius="2">
                                        <StackPanel x:Name="StackPanel" Orientation="Horizontal">
                                            <RibbonToggleButton x:Name="PART_HeaderButton" Template="{StaticResource Ħ}"
                                                 Label="{TemplateBinding RibbonMenuButton.Label}"
                                                 LargeImageSource="{TemplateBinding RibbonMenuButton.LargeImageSource}"
                                                 SmallImageSource="{TemplateBinding RibbonMenuButton.SmallImageSource}"
                                                 BorderBrush="{TemplateBinding Control.BorderBrush}"
                                                 BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                                                 CornerRadius="2,0,0,2" Focusable="false"
                                                 ToolTipTitle="{TemplateBinding RibbonMenuButton.ToolTipTitle}"
                                                 ToolTipDescription="{TemplateBinding RibbonMenuButton.ToolTipDescription}"
                                                 ToolTipImageSource="{TemplateBinding RibbonMenuButton.ToolTipImageSource}"
                                                 ToolTipFooterTitle="{TemplateBinding RibbonMenuButton.ToolTipFooterTitle}"
                                                 ToolTipFooterDescription="{TemplateBinding RibbonMenuButton.ToolTipFooterDescription}"
                                                 ToolTipFooterImageSource="{TemplateBinding RibbonMenuButton.ToolTipFooterImageSource}"
                                                 MouseOverBorderBrush="{TemplateBinding RibbonMenuButton.MouseOverBorderBrush}"
                                                 MouseOverBackground="{TemplateBinding RibbonMenuButton.MouseOverBackground}"
                                                 PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                                 PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                                 CheckedBorderBrush="{TemplateBinding RibbonSplitButton.CheckedBorderBrush}"
                                                 CheckedBackground="{TemplateBinding RibbonSplitButton.CheckedBackground}"
                                                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                 Padding="{TemplateBinding Control.Padding}"
                                                 Command="{TemplateBinding RibbonSplitButton.Command}"
                                                 CommandParameter="{TemplateBinding RibbonSplitButton.CommandParameter}"
                                                 CommandTarget="{TemplateBinding RibbonSplitButton.CommandTarget}"
                                                 KeyTip="{TemplateBinding RibbonSplitButton.HeaderKeyTip}"
                                                 QuickAccessToolBarId="{TemplateBinding RibbonSplitButton.HeaderQuickAccessToolBarId}"
                                                 CanAddToQuickAccessToolBarDirectly="true"
                                                 ToolTipService.InitialShowDelay="{StaticResource Í}"
                                                 ToolTipService.ShowDuration="{StaticResource Î}"
                                                 ToolTipService.BetweenShowDelay="{StaticResource Ï}" Style="{x:Null}"
                                                 IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay}">
                                                <RibbonToggleButton.ControlSizeDefinition>
                                                    <RibbonControlSizeDefinition ImageSize="Large" IsLabelVisible="false"/>
                                                </RibbonToggleButton.ControlSizeDefinition>
                                                <RibbonToggleButton.QuickAccessToolBarControlSizeDefinition>
                                                    <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="false"/>
                                                </RibbonToggleButton.QuickAccessToolBarControlSizeDefinition>
                                                <FrameworkElement.Resources>
                                                    <Thickness Left="1" Top="1" Right="1" Bottom="0"
                                             x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}"/>
                                                </FrameworkElement.Resources>
                                            </RibbonToggleButton>
                                            <Grid>
                                                <Border x:Name="UnderlayBorder" Opacity="0.5" Visibility="Collapsed"
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"/>
                                                <RibbonToggleButton x:Name="PART_ToggleButton" Template="{StaticResource Ħ}"
                                                   Label="{TemplateBinding RibbonMenuButton.Label}"
                                                   RibbonTwoLineText.PathData="{StaticResource Ð}"
                                                   BorderBrush="{TemplateBinding Control.BorderBrush}" Background="Transparent"
                                                   CornerRadius="0,2,2,0"
                                                   MouseOverBorderBrush="{TemplateBinding RibbonMenuButton.MouseOverBorderBrush}"
                                                   MouseOverBackground="{TemplateBinding RibbonMenuButton.MouseOverBackground}"
                                                   PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                                   PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                                   CheckedBorderBrush="{TemplateBinding RibbonSplitButton.CheckedBorderBrush}"
                                                   CheckedBackground="{TemplateBinding RibbonSplitButton.CheckedBackground}"
                                                   FocusedBorderBrush="{TemplateBinding RibbonMenuButton.FocusedBorderBrush}"
                                                   FocusedBackground="{TemplateBinding RibbonMenuButton.FocusedBackground}"
                                                   HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                   Padding="{TemplateBinding Control.Padding}"
                                                   ToolTipTitle="{TemplateBinding RibbonSplitButton.DropDownToolTipTitle}"
                                                   ToolTipDescription="{TemplateBinding RibbonSplitButton.DropDownToolTipDescription}"
                                                   ToolTipImageSource="{TemplateBinding RibbonSplitButton.DropDownToolTipImageSource}"
                                                   ToolTipFooterTitle="{TemplateBinding RibbonSplitButton.DropDownToolTipFooterTitle}"
                                                   ToolTipFooterDescription="{TemplateBinding RibbonSplitButton.DropDownToolTipFooterDescription}"
                                                   ToolTipFooterImageSource="{TemplateBinding RibbonSplitButton.DropDownToolTipFooterImageSource}"
                                                   ClickMode="Press" ToolTipService.InitialShowDelay="{StaticResource Í}"
                                                   ToolTipService.ShowDuration="{StaticResource Î}"
                                                   ToolTipService.BetweenShowDelay="{StaticResource Ï}" Style="{x:Null}"
                                                   FocusVisualStyle="{x:Null}"
                                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}">
                                                    <RibbonToggleButton.ControlSizeDefinition>
                                                        <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="false"/>
                                                    </RibbonToggleButton.ControlSizeDefinition>
                                                </RibbonToggleButton>
                                                <Border x:Name="OverlayBottomBorder"
                                BorderBrush="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                Height="2" VerticalAlignment="Top"/>
                                                <Border x:Name="OverlayTopBorder"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                Margin="1,0"/>
                                            </Grid>
                                        </StackPanel>
                                    </Border>
                                </Border>
                                <Popup x:Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
                       Placement="Bottom" Focusable="false"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}">
                                    <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                                  KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled">
                                        <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                            CornerRadius="2"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                                            <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" BorderThickness="0"
                              CornerRadius="2">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>
                                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer" Grid.Row="1" Margin="1"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                           Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                           Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                           Fill="{Binding ElementName=MenuBorder, Path=Background}"/>
                                                                <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                           Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                           Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                           Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"/>
                                                            </Canvas>
                                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                              KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                                        </Grid>
                                                    </ScrollViewer>
                                                    <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                                  BorderThickness="0,1,0,0"
                                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                                        <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                                    </Border>
                                                </Grid>
                                            </Border>
                                        </Border>
                                    </classic:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                    <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                                  Property="Canvas.Top"/>
                                    <Setter TargetName="OpaqueRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                  Property="Canvas.Left"/>
                                    <Setter TargetName="OverlayRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                                    <Setter TargetName="OverlayRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                  Property="Canvas.Left"/>
                                </Trigger>
                                <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
                                    <Setter TargetName="PART_HeaderButton" Property="ToolTipService.IsEnabled" Value="false"/>
                                    <Setter TargetName="PART_ToggleButton" Property="ToolTipService.IsEnabled" Value="false"/>
                                </Trigger>
                                <Trigger Property="RibbonMenuButton.HasGallery" Value="true">
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                                  Value="Disabled"/>
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                                  Value="Disabled"/>
                                </Trigger>
                                <DataTrigger Value="Large"
                                     Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                                    <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                                    <Setter TargetName="PART_HeaderButton" Property="FrameworkElement.Height" Value="37"/>
                                    <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Height" Value="29"/>
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
                                    <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Vertical"/>
                                    <Setter TargetName="PART_HeaderButton" Property="Control.VerticalContentAlignment" Value="Stretch"/>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.CornerRadius" Value="2,2,0,0"/>
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.CornerRadius" Value="0,0,2,2"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                       Value="Large"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                       Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                       Value="Small"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                       Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                       Value="Small"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                       Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                       Value="Small"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                       Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="true"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}">
                                    <Setter TargetName="PART_HeaderButton" Property="FrameworkElement.Height" Value="Auto"/>
                                    <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Height" Value="Auto"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                       Value="Collapsed"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                       Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="false"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                       Value="Collapsed"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                       Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="false"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                       Value="Collapsed"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                       Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="true">
                                    <Setter TargetName="OuterBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="InnerBorder" Value="{StaticResource ĩ}" Property="Border.Background"/>
                                    <Setter TargetName="PART_ToggleButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition SourceName="PART_ToggleButton" Property="UIElement.IsMouseOver" Value="true"/>
                                        <Condition SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="OuterBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="InnerBorder" Value="{StaticResource ĩ}" Property="Border.Background"/>
                                    <Setter TargetName="PART_HeaderButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                </MultiTrigger>
                                <Trigger SourceName="PART_ToggleButton" Property="UIElement.IsKeyboardFocused" Value="true">
                                    <Setter TargetName="OuterBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="PART_HeaderButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="RibbonSplitButton.IsChecked" Value="true">
                                    <Setter TargetName="OuterBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="PART_ToggleButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                </Trigger>
                                <Trigger SourceName="PART_ToggleButton" Property="ToggleButton.IsChecked" Value="True">
                                    <Setter TargetName="OuterBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="InnerBorder" Value="{StaticResource ĩ}" Property="Border.Background"/>
                                    <Setter TargetName="PART_HeaderButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="RibbonMenuButton.IsInControlGroup" Value="true">
                                    <Setter TargetName="OuterBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                                    <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                                    <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.CornerRadius" Value="0"/>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.CornerRadius" Value="0"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                        <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false"/>
                                        <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                                  Property="FrameworkElement.Style"/>
                                </MultiTrigger>
                                <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
                                    <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0"/>
                                    <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true"/>
                                        <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                        <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                                  Property="FrameworkElement.Style"/>
                                </MultiTrigger>
                                <Trigger Value="{x:Null}" Property="RibbonSplitButton.HeaderQuickAccessToolBarId">
                                    <Setter TargetName="PART_HeaderButton"
                                  Property="RibbonToggleButton.CanAddToQuickAccessToolBarDirectly" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                                    <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                                    <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                                  Property="classic:SystemDropShadowChrome.Color"/>
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false"/>
                                        <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                  Property="Control.BorderBrush"/>
                                    <Setter TargetName="UnderlayBorder" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="PART_ToggleButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                </MultiTrigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                                </Trigger>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                                    <Setter TargetName="MainGrid"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                    <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                    <Setter TargetName="MenuBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="MenuBorder"
                                  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                                    <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="ResizeControl"
                                  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="ResizeControl"
                                  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="PART_HeaderButton" Property="RibbonToggleButton.CornerRadius" Value="0"/>
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonToggleButton.CornerRadius" Value="0"/>
                                    <Setter TargetName="UnderlayBorder" Property="UIElement.Opacity" Value="0"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                  Property="Control.BorderBrush"/>
                                    <Setter TargetName="OverlayBottomBorder" Property="Border.BorderThickness" Value="1"/>
                                    <Setter TargetName="OverlayTopBorder" Property="Border.BorderThickness" Value="0,1,0,0"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                        <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                        <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="UnderlayBorder" Property="UIElement.Opacity" Value="1"/>
                                    <Setter TargetName="UnderlayBorder"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Border.Background"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="PART_HeaderButton"
                                  Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                  Property="Control.BorderBrush"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                  Property="Control.BorderBrush"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Control.BorderBrush"/>
                                    <Setter TargetName="PART_ToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Control.BorderBrush"/>
                                </MultiDataTrigger>
                                <Trigger Property="RibbonMenuButton.IsInQuickAccessToolBar" Value="true">
                                    <Setter TargetName="PART_HeaderButton"
                                  Property="RibbonToggleButton.CanAddToQuickAccessToolBarDirectly" Value="false"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="MainGrid"
                                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ö" TargetType="{x:Type RibbonButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonButton}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="1" ContentSource="Content" HorizontalAlignment="Left" VerticalAlignment="Center"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ù" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="1" ContentSource="Content" HorizontalAlignment="Left" VerticalAlignment="Center"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="÷" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="OuterBorder" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                        <Path Data="{StaticResource ð}" Fill="{TemplateBinding Control.Foreground}"
                  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonSplitMenuItem}">
        <Setter Property="Control.HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Padding" Value="3,2,3,2"/>
        <Setter Property="RibbonMenuItem.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonMenuItem.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonMenuItem.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonMenuItem.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonControlService.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonControlService.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="ToolTipService.IsEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonSplitMenuItem}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true" Margin="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="14"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="HighlightLeftBorder" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}"/>
                        <Border x:Name="HighlightLeftBorderOverlay" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
                    BorderBrush="Transparent" Background="Transparent"/>
                        <Border x:Name="PART_SideBarBorder" Margin="-1,-1,0,-1" BorderThickness="0,0,1,0"
                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                            <Grid x:Name="SideBarOverlay" Background="{StaticResource ì}">
                                <Image x:Name="Image" Margin="4,3,6,1" Width="16" Height="16" VerticalAlignment="Center"
                       HorizontalAlignment="Center" Source="{TemplateBinding RibbonMenuItem.ImageSource}"/>
                                <Border x:Name="CheckMarkBorder"
                        Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                        BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                        BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
                        Margin="1" Width="20" Height="20" CornerRadius="2">
                                    <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                        HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                        FlowDirection="LeftToRight" Data="{StaticResource ï}"/>
                                </Border>
                            </Grid>
                        </Border>
                        <RibbonButton x:Name="PART_HeaderButton" Grid.ColumnSpan="2" Style="{StaticResource ö}"
                                 Command="{TemplateBinding MenuItem.Command}"
                                 CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                                 CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                                 Content="{TemplateBinding HeaderedItemsControl.Header}"
                                 ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                 ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                 SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                                 Padding="{TemplateBinding Control.Padding}" Background="Transparent" Focusable="false"
                                 ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                                 ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                                 ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                                 ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                                 ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                                 ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                                 KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                                 QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                                 CanAddToQuickAccessToolBarDirectly="true"/>
                        <Border x:Name="HighlightRightBorder" Grid.Column="2" CornerRadius="0,2,2,0"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
                            <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                         Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                         ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                         ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                         ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                         ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                         ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                         ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                         IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                        </Border>
                        <Border x:Name="HighlightRightBorderOverlay" Grid.Column="2" CornerRadius="0,2,2,0"
                    Background="Transparent" BorderBrush="Transparent"/>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
                   Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                              RenderOptions.ClearTypeHint="Enabled">
                                <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        CornerRadius="2"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                                    <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                       Fill="{Binding ElementName=MenuBorder, Path=Background}"/>
                                                        <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" Margin="2" Grid.IsSharedSizeScope="true"
                                          KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                                </Grid>
                                            </ScrollViewer>
                                            <Border x:Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                              BorderThickness="0,1,0,0"
                              BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                                <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                            </Border>
                                        </Grid>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                              Value="Disabled"/>
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                              Value="Disabled"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger Property="MenuItem.IsChecked" Value="true">
                            <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="true">
                            <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                            <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CanAddToQuickAccessToolBarDirectly"
                              Value="false"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="HighlightRightBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="HighlightRightBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Control.BorderBrush"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HighlightLeftBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="HighlightLeftBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                              Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                            <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                                <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                              Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="MenuItem.IsChecked" Value="true">
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsPressed" Value="true">
                            <Setter TargetName="HighlightLeftBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="HighlightRightBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="HighlightLeftBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="HighlightRightBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Control.BorderBrush"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                              Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                            <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="PART_SideBarBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_SubMenuScrollViewer"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Control.Foreground"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="CheckMark"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="Shape.Fill"/>
                            <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                            <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="CheckMarkBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="CheckMarkBorder"
                              Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Control.BorderBrush"/>
                            <Setter TargetName="HighlightLeftBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="HighlightRightBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="HighlightLeftBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="HighlightRightBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Control.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_ArrowToggleButton, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Control.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ArrowToggleButton"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                            <Setter TargetName="CheckMarkBorder"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="CheckMark"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="MenuItem.IsCheckable" Value="true">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSplitMenuItem}">
                            <Grid x:Name="MainGrid" SnapsToDevicePixels="true" Margin="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="HighlightLeftBorder" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        Background="{TemplateBinding Control.Background}"/>
                                <Border x:Name="HighlightLeftBorderOverlay" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
                        BorderBrush="Transparent" Background="Transparent"/>
                                <Border x:Name="PART_SideBarBorder" Margin="-1,-1,0,-1" BorderThickness="0,0,1,0"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                    <Grid x:Name="SideBarOverlay" Background="{StaticResource ì}">
                                        <Image x:Name="Image" Margin="4,3,6,1" Width="16" Height="16" VerticalAlignment="Center"
                           HorizontalAlignment="Center" Source="{TemplateBinding RibbonMenuItem.ImageSource}"/>
                                        <Border x:Name="CheckMarkBorder"
                            Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                            BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                            BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
                            Margin="1" Width="20" Height="20" CornerRadius="2">
                                            <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                            HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                            FlowDirection="LeftToRight" Data="{StaticResource ï}"/>
                                        </Border>
                                    </Grid>
                                </Border>
                                <RibbonToggleButton x:Name="PART_HeaderButton" Grid.ColumnSpan="2" Style="{StaticResource ù}"
                                           Command="{TemplateBinding MenuItem.Command}"
                                           CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                                           CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                                           Content="{TemplateBinding HeaderedItemsControl.Header}"
                                           ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                           ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                           ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                           SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                                           Padding="{TemplateBinding Control.Padding}" Background="Transparent" Focusable="false"
                                           ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                                           ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                                           ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                                           ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                                           ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                                           ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                                           KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                                           QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                                           CanAddToQuickAccessToolBarDirectly="true"/>
                                <Border x:Name="HighlightRightBorder" Grid.Column="2" CornerRadius="0,2,2,0"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}">
                                    <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                             Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                             ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                             ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                             ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                             ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                             ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                             ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                             IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                                </Border>
                                <Border x:Name="HighlightRightBorderOverlay" Grid.Column="2" CornerRadius="0,2,2,0"
                        Background="Transparent" BorderBrush="Transparent"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
                       Focusable="false"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                                  RenderOptions.ClearTypeHint="Enabled">
                                        <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                            CornerRadius="2"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                                            <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>
                                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                           Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                           Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                           Fill="{Binding ElementName=MenuBorder, Path=Background}"/>
                                                                <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                                           Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                           Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"/>
                                                            </Canvas>
                                                            <ItemsPresenter x:Name="ItemsPresenter" Margin="2" Grid.IsSharedSizeScope="true"
                                              KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                                        </Grid>
                                                    </ScrollViewer>
                                                    <Border x:Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                                  BorderThickness="0,1,0,0"
                                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                                        <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                                    </Border>
                                                </Grid>
                                            </Border>
                                        </Border>
                                    </classic:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                    <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                                  Property="Canvas.Top"/>
                                    <Setter TargetName="OpaqueRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                  Property="Canvas.Left"/>
                                    <Setter TargetName="OverlayRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                                    <Setter TargetName="OverlayRect"
                                  Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                  Property="Canvas.Left"/>
                                </Trigger>
                                <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                                  Value="Disabled"/>
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                                  Value="Disabled"/>
                                </Trigger>
                                <Trigger Property="ItemsControl.HasItems" Value="true">
                                    <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                                        <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                                        <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                                  Property="FrameworkElement.Style"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                                        <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                                        <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                                  Property="FrameworkElement.Style"/>
                                </MultiTrigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                                    <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                                    <Setter TargetName="PART_HeaderButton"
                                  Property="RibbonToggleButton.CanAddToQuickAccessToolBarDirectly" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                                    <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                                    <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                                  Property="classic:SystemDropShadowChrome.Color"/>
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="HighlightRightBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="HighlightRightBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                    <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                                    <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                        <Condition SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HighlightLeftBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="HighlightLeftBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                                  Property="Border.BorderBrush"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                        <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                                  Property="Border.Background"/>
                                </MultiTrigger>
                                <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                                    <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                        <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                        <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                                        <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                                  Property="Border.Background"/>
                                </MultiTrigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsPressed" Value="true">
                                    <Setter TargetName="HighlightLeftBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="HighlightRightBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="HighlightLeftBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="HighlightRightBorder"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                                  Property="Control.BorderBrush"/>
                                    <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                                    <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                                    <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                                  Property="TextElement.Foreground"/>
                                </Trigger>
                                <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                                    <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                                    <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                                </Trigger>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                                    <Setter TargetName="MainGrid"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                    <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                                    <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                                    <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                                    <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                                    <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                    <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                                    <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent"/>
                                    <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="PART_SideBarBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="PART_SubMenuScrollViewer"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="Control.Foreground"/>
                                    <Setter TargetName="MenuBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="MenuBorder"
                                  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="SubMenuInnerBorder" Property="Border.CornerRadius" Value="0"/>
                                    <Setter TargetName="ResizeControl"
                                  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="ResizeControl"
                                  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="CheckMark"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="Shape.Fill"/>
                                    <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                                    <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                                    <Setter TargetName="CheckMarkBorder"
                                  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="CheckMarkBorder"
                                  Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="MainGrid"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="Control.BorderBrush"/>
                                    <Setter TargetName="HighlightLeftBorder"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="HighlightRightBorder"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Border.Background"/>
                                    <Setter TargetName="HighlightLeftBorder"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="HighlightRightBorder"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                  Property="Control.BorderBrush"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_ArrowToggleButton, Path=IsChecked}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                  Property="Control.Background"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ArrowToggleButton"
                                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False"/>
                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton"
                                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                  Property="TextElement.Foreground"/>
                                    <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                                    <Setter TargetName="CheckMarkBorder"
                                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="CheckMark"
                                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                  Property="Shape.Fill"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type RibbonTab}">
        <Setter Property="KeyTipService.IsKeyTipScope" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonTab}">
                    <Grid x:Name="MainGrid" ClipToBounds="true"
                Visibility="{TemplateBinding IsSelected, Converter={StaticResource à}}">
                        <Line x:Name="OuterLeftLine" StrokeThickness="2" X1="0" Y1="0" Y2="0"
                  Stroke="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                  X2="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TabHeaderLeft}"/>
                        <Line x:Name="OuterRightLine" StrokeThickness="2" Y1="0" Y2="0"
                  Stroke="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                  X1="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TabHeaderRight}"
                  X2="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"/>
                        <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource Ī}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top"
                        Margin="0,1,0,0">
                                    <Rectangle x:Name="OpaqueRect" Height="{Binding ElementName=ScrollViewer, Path=ActualHeight}"
                             Width="{Binding ElementName=ScrollViewer, Path=ActualWidth}"
                             Fill="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).Background}"/>
                                    <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ù}"
                             Height="{Binding ElementName=ScrollViewer, Path=ActualHeight}"
                             Width="{Binding ElementName=ScrollViewer, Path=ActualWidth}"/>
                                    <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ø}"
                             Height="{Binding ElementName=ScrollViewer, Path=ActualHeight}"
                             Width="{Binding ElementName=ScrollViewer, Path=ActualWidth}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"/>
                            </Grid>
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="ScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect" Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect" Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="InnerOverlayRect" Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="InnerOverlayRect" Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContextualTabGroup}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterLeftLine"
                              Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonTab}}, Path=Ribbon.BorderBrush}"
                              Property="Shape.Stroke"/>
                            <Setter TargetName="OuterRightLine"
                              Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonTab}}, Path=Ribbon.BorderBrush}"
                              Property="Shape.Stroke"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="OuterLeftLine"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Shape.Stroke"/>
                            <Setter TargetName="OuterRightLine"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                              Property="Shape.Stroke"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonTabHeaderItemsControl}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonTabHeaderItemsControl}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Control.Background}">
                        <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource Ī}">
                            <ItemsPresenter x:Name="ItemsPresenter"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="MainBorder" Property="Border.Background" Value="Transparent"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type KeyTipControl}">
        <Setter Property="Control.Background" Value="{StaticResource È}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource É}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="3,0"/>
        <Setter Property="Control.FontSize"
                    Value="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}"/>
        <Setter Property="Control.FontStyle"
                    Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="Control.FontWeight"
                    Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Control.FontFamily"
                    Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="Control.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
        <Setter Property="FrameworkElement.MinWidth" Value="20"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type KeyTipControl}">
                    <Border Name="OuterBorder" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="1">
                        <Border Name="InnerBorder" Padding="{TemplateBinding Control.Padding}"
                    Background="{StaticResource Ê}">
                            <TextBlock Text="{TemplateBinding KeyTipControl.Text}" HorizontalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource Ë}" TargetName="OuterBorder" Property="TextElement.Foreground"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"
                              TargetName="OuterBorder" Property="Border.BorderBrush"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"
                              TargetName="OuterBorder" Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"
                              TargetName="OuterBorder" Property="TextElement.Foreground"/>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              TargetName="OuterBorder" Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="â" Color="#FFB65000"/>
    <LinearGradientBrush x:Key="ã" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#90FFFFFF"/>
        <GradientStop Offset="0.5" Color="#30FFFFFF"/>
        <GradientStop Offset="0.5" Color="Transparent"/>
        <GradientStop Offset="1" Color="#70FFFFFF"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ä" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#60FFFFFF"/>
        <GradientStop Offset="0.5" Color="#20FFFFFF"/>
        <GradientStop Offset="0.5" Color="Transparent"/>
        <GradientStop Offset="1" Color="Transparent"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="å" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4CFFFFFF" Offset="0" />
        <GradientStop Color="#26FFFFFF" Offset="1" />
        <GradientStop Color="#26FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
        <GradientStop Color="#00FFFFFF" Offset="0.856" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="æ" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#90FFFFFF"/>
        <GradientStop Offset="0.5" Color="#20FFFFFF"/>
        <GradientStop Offset="0.5" Color="Transparent"/>
        <GradientStop Offset="1" Color="Transparent"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ç" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4CFFFFFF" Offset="0" />
        <GradientStop Color="#26FFFFFF" Offset="1" />
        <GradientStop Color="#26FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
        <GradientStop Color="#00FFFFFF" Offset="0.856" />
    </LinearGradientBrush>
    <RadialGradientBrush x:Key="è">
        <GradientStop Offset="0" Color="LightGray"/>
        <GradientStop Offset="0.4" Color="White"/>
    </RadialGradientBrush>
    <Geometry x:Key="é">
        M 0 0 L 2.25 3 L 4.5 0 Z
    </Geometry>
    <Style x:Key="ê" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="Control.BorderBrush" Value="{StaticResource â}"/>
        <Setter Property="Control.Background" Value="{StaticResource â}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground" Value="{StaticResource è}"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FocusManager.IsFocusScope" Value="false"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Grid SnapsToDevicePixels="true"
                Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}">
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0,2,0,0"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <Border x:Name="MiddleBorder" BorderBrush="Transparent" Background="{StaticResource ã}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0,2,0,0"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border x:Name="InnerBorder" BorderBrush="{StaticResource ä}" Background="Transparent"
                      BorderThickness="1" CornerRadius="0,2,0,0"/>
                        </Border>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Image IsHitTestVisible="false" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16"
                     Height="16" Margin="0,-0.5,0,0" RenderOptions.BitmapScalingMode="NearestNeighbor"
                     RenderOptions.EdgeMode="Aliased"
                     Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RibbonApplicationMenu}}, Path=SmallImageSource}"/>
                            <Path x:Name="DownArrow" Data="{StaticResource é}" Stroke="{StaticResource ã}"
                    StrokeThickness=".5" Fill="{TemplateBinding Control.Foreground}"
                    HorizontalAlignment="Center" VerticalAlignment="Center" Margin="3.5,0,0,0">
                                <UIElement.RenderTransform>
                                    <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                                </UIElement.RenderTransform>
                            </Path>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder" Value="{StaticResource å}" Property="Border.Background"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource æ}" Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
                            <Setter TargetName="MiddleBorder" Value="{StaticResource å}" Property="Border.Background"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource æ}" Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="MiddleBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="MiddleBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="DownArrow"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Shape.Stroke"/>
                            <Setter TargetName="DownArrow"
                              Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                              Property="Shape.Fill"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RibbonApplicationMenu}">
        <Style.Resources>
            <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="UIElement.Focusable" Value="false"/>
                <Setter Property="Control.BorderBrush"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonApplicationMenu}}, Path=Ribbon.BorderBrush}"/>
                <Setter Property="Control.Background"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonApplicationMenu}}, Path=Ribbon.Background}"/>
                <Setter Property="Control.FontWeight" Value="Bold"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border x:Name="MainBorder" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                                <Border x:Name="Overlay" Background="{StaticResource ì}">
                                    <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="Text"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="TextBlock.Foreground"/>
                                    <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                  Property="Border.Background"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid x:Name="Grid" Margin="1" SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*" MinWidth="44"/>
                                            <ColumnDefinition Width="22"/>
                                        </Grid.ColumnDefinitions>
                                        <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" X1="0" Y1="0" X2="1" Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                            <Setter TargetName="Line"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Shape.Stroke"/>
                                            <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="0"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Control.BorderBrush" Value="{StaticResource â}"/>
        <Setter Property="Control.Background" Value="{StaticResource â}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FrameworkElement.Height" Value="23"/>
        <Setter Property="FrameworkElement.Width" Value="56"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonApplicationMenu}">
                    <Grid x:Name="OuterGrid" Focusable="false" SnapsToDevicePixels="true">
                        <RibbonToggleButton x:Name="PART_ToggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}"
                                       Background="{TemplateBinding Control.Background}"
                                       BorderThickness="{TemplateBinding Control.BorderThickness}"
                                       Style="{StaticResource ê}"
                                       FocusVisualStyle="{TemplateBinding FrameworkElement.FocusVisualStyle}"
                                       ToolTipTitle="{TemplateBinding RibbonMenuButton.ToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding RibbonMenuButton.ToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding RibbonMenuButton.ToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding RibbonMenuButton.ToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding RibbonMenuButton.ToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding RibbonMenuButton.ToolTipFooterImageSource}"
                                       SmallImageSource="{TemplateBinding RibbonMenuButton.SmallImageSource}"
                                       Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                       Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                                       IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"/>
                        <Border x:Name="CenterBorder" Height="1" Margin="-1,-1,0,0" HorizontalAlignment="Stretch"
                    VerticalAlignment="Top"/>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="true"
                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                   PlacementTarget="{Binding ElementName=CenterBorder}">
                            <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                              RenderOptions.ClearTypeHint="Enabled">
                                <Grid>
                                    <Border x:Name="PopupBorder" BorderThickness="1" CornerRadius="2"
                          BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                          Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="24"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Border x:Name="HeaderBorder" Background="Transparent" BorderThickness="0,0,0,1" CornerRadius="2,2,0,0"
                              BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}"/>
                                            <Border x:Name="HeaderOverlayBorder" BorderBrush="{StaticResource ë}"
                              Background="{StaticResource å}" BorderThickness="0,0,0,1" CornerRadius="2,2,0,0"/>
                                            <Grid Row="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="2"/>
                                                    <ColumnDefinition Width="300"/>
                                                </Grid.ColumnDefinitions>
                                                <Border x:Name="MainPaneBorder" Background="{StaticResource í}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition/>
                                                            <RowDefinition Height="Auto"/>
                                                        </Grid.RowDefinitions>
                                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer" Grid.Row="1" CanContentScroll="true"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                                <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                    <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                             Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}"
                                             Width="{Binding ElementName=MainPaneBorder, Path=ActualWidth}"
                                             Fill="{Binding ElementName=MainPaneBorder, Path=Background}"/>
                                                                    <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                             Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}"
                                             Width="{Binding ElementName=MainPaneBorder, Path=ActualWidth}"
                                             Fill="{Binding ElementName=MainPaneBorder, Path=Background}"/>
                                                                </Canvas>
                                                                <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="true"/>
                                                            </Grid>
                                                        </ScrollViewer>
                                                        <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                                    BorderThickness="0,1,0,0"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                                            <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                                        </Border>
                                                    </Grid>
                                                </Border>
                                                <Border x:Name="PART_SubmenuPlaceholder" Grid.Column="2" Background="{StaticResource ë}"
                                Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}">
                                                    <ContentPresenter x:Name="PART_AuxiliaryPaneContentPresenter" ContentSource="AuxiliaryPaneContent"
                                            ContentTemplate="{TemplateBinding RibbonApplicationMenu.AuxiliaryPaneContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding RibbonApplicationMenu.AuxiliaryPaneContentTemplateSelector}"/>
                                                </Border>
                                                <Border x:Name="VerticalBorder" Grid.Column="1" HorizontalAlignment="Left" Background="Black" Width="2"
                                BorderThickness="1,0,0,0"
                                BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}"/>
                                                <Border x:Name="VerticalOverlayBorder" Grid.Column="1" HorizontalAlignment="Left" Background="Transparent"
                                Width="2" BorderThickness="1,0,0,0" BorderBrush="{StaticResource ë}"/>
                                            </Grid>
                                            <Border x:Name="FooterBorder" Grid.Row="2" Background="Transparent" BorderThickness="0,1,0,0"
                              CornerRadius="0,0,2,2"
                              BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}">
                                                <Border x:Name="FooterBackgroundOverlayBorder" BorderBrush="Transparent"
                                Background="{StaticResource ç}" CornerRadius="0,0,2,2">
                                                    <ContentPresenter x:Name="PART_FooterPaneContentPresenter" Margin="2" MinHeight="12"
                                            ContentSource="FooterPaneContent"
                                            ContentTemplate="{TemplateBinding RibbonApplicationMenu.FooterPaneContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding RibbonApplicationMenu.FooterPaneContentTemplateSelector}"/>
                                                </Border>
                                            </Border>
                                            <Border x:Name="FooterOverlayBorder" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                              BorderBrush="{StaticResource ë}" Background="Transparent" BorderThickness="0,1,0,0"
                              CornerRadius="0,0,2,2"/>
                                        </Grid>
                                    </Border>
                                    <Canvas>
                                        <RibbonToggleButton x:Name="PART_PopupToggleButton" Canvas.Top="-24" Canvas.Left="3"
                                               BorderBrush="{TemplateBinding Control.BorderBrush}"
                                               Background="{TemplateBinding Control.Background}"
                                               BorderThickness="{TemplateBinding Control.BorderThickness}"
                                               Style="{StaticResource ê}" Focusable="false"
                                               AutomationProperties.Name="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(AutomationProperties.Name)}"
                                               IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                                               Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                               Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"/>
                                    </Canvas>
                                </Grid>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect"
                              Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <Trigger Property="RibbonMenuButton.HasGallery" Value="true">
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                              Value="Disabled"/>
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                              Value="Disabled"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
                            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                            <Setter TargetName="OuterGrid"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                            <Setter TargetName="PopupBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PopupBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="PopupBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="HeaderBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="HeaderBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="HeaderOverlayBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="HeaderOverlayBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="HeaderOverlayBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="MainPaneBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="PART_SubmenuPlaceholder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="VerticalBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="VerticalBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="VerticalOverlayBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="FooterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="FooterBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="FooterOverlayBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="FooterOverlayBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="FooterBackgroundOverlayBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="FooterBackgroundOverlayBorder" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
                <Setter Property="ToolTipService.IsEnabled" Value="false"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="õ" TargetType="{x:Type RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="true" Margin="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*" MinWidth="44"/>
                <ColumnDefinition Width="22"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}"/>
            <Border x:Name="HighlightLeftBorderOverlay" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="Transparent" Background="Transparent"/>
            <Image x:Name="Image" Margin="6,4,6,4" Width="32" Height="32" VerticalAlignment="Center"
             HorizontalAlignment="Center" Source="{TemplateBinding RibbonMenuItem.ImageSource}"
             RenderOptions.BitmapScalingMode="NearestNeighbor"/>
            <Border x:Name="CheckMarkBorder"
              Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
              BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
              BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
              Margin="1" Width="30" Height="30" CornerRadius="2">
                <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
              HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
              FlowDirection="LeftToRight" Data="{StaticResource ï}">
                    <UIElement.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                    </UIElement.RenderTransform>
                </Path>
            </Border>
            <RibbonButton x:Name="PART_HeaderButton" Grid.ColumnSpan="2" Style="{StaticResource ö}"
                           Command="{TemplateBinding MenuItem.Command}"
                           CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                           CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                           Content="{TemplateBinding HeaderedItemsControl.Header}"
                           ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                           ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                           ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                           SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                           Padding="{TemplateBinding Control.Padding}" HorizontalContentAlignment="Left"
                           Background="Transparent" Focusable="false"
                           ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                           ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                           ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                           ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                           ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                           ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                           KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                           QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                           CanAddToQuickAccessToolBarDirectly="true"/>
            <Border x:Name="HighlightRightBorder" Grid.Column="2" CornerRadius="0,2,2,0" HorizontalAlignment="Stretch"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}">
                <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                   Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                   ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                   IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
            </Border>
            <Border x:Name="HighlightRightBorderOverlay" Grid.Column="2" CornerRadius="0,2,2,0"
              HorizontalAlignment="Stretch" BorderBrush="Transparent" Background="Transparent"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             Placement="Relative" Focusable="false" SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Grid>
                        <Border x:Name="PopupBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2"
                    BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                    Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="PopupOverlayBorder" BorderBrush="{StaticResource ë}"
                    Background="{StaticResource í}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer" CanContentScroll="true" HorizontalScrollBarVisibility="Disabled"
                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                            <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                    </Grid>
                                </ScrollViewer>
                                <Border x:Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                        BorderThickness="0,1,0,0"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="true">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CanAddToQuickAccessToolBarDirectly"
                        Value="false"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                        Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PopupOverlayBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PopupOverlayBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ø" TargetType="{x:Type RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="true" Margin="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*" MinWidth="44"/>
                <ColumnDefinition Width="22"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}"/>
            <Border x:Name="HighlightLeftBorderOverlay" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="Transparent" Background="Transparent"/>
            <Image x:Name="Image" Margin="6,4,6,4"
             Source="{TemplateBinding RibbonMenuItem.ImageSource}" Width="32" Height="32"
             VerticalAlignment="Center" HorizontalAlignment="Center"
             RenderOptions.BitmapScalingMode="NearestNeighbor"/>
            <Border x:Name="CheckMarkBorder"
              Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
              BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
              BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
              Margin="1" Width="30" Height="30" CornerRadius="2">
                <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
              HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
              FlowDirection="LeftToRight" Data="{StaticResource ï}">
                    <UIElement.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                    </UIElement.RenderTransform>
                </Path>
            </Border>
            <RibbonToggleButton x:Name="PART_HeaderButton" Grid.ColumnSpan="2" Style="{StaticResource ù}"
                                 Command="{TemplateBinding MenuItem.Command}"
                                 CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                                 CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                                 Content="{TemplateBinding HeaderedItemsControl.Header}"
                                 ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                 ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                 SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                                 Padding="{TemplateBinding Control.Padding}" HorizontalContentAlignment="Left"
                                 Background="Transparent" Focusable="false"
                                 ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                                 ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                                 ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                                 ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                                 ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                                 ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                                 KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                                 QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                                 CanAddToQuickAccessToolBarDirectly="true"/>
            <Border x:Name="HighlightRightBorder" Grid.Column="2" CornerRadius="0,2,2,0" HorizontalAlignment="Stretch"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}">
                <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                   Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                   ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                   IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
            </Border>
            <Border x:Name="HighlightRightBorderOverlay" Grid.Column="2" CornerRadius="0,2,2,0"
              HorizontalAlignment="Stretch" BorderBrush="Transparent" Background="Transparent"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             Placement="Relative" Focusable="false" SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Grid>
                        <Border x:Name="PopupBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2"
                    BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                    Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="PopupOverlayBorder" BorderBrush="{StaticResource ë}"
                    Background="{StaticResource í}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer" CanContentScroll="true" HorizontalScrollBarVisibility="Disabled"
                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                            <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                    </Grid>
                                </ScrollViewer>
                                <Border x:Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                        BorderThickness="0,1,0,0"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="true">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                <Setter TargetName="PART_HeaderButton"
                        Property="RibbonToggleButton.CanAddToQuickAccessToolBarDirectly" Value="false"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                        Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PopupOverlayBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PopupOverlayBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ú" TargetType="{x:Type RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid" Margin="1" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="22"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}"/>
            <Border x:Name="HighlightLeftBorderOverlay" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="Transparent" Background="Transparent"/>
            <Image x:Name="Image" Margin="4,3,6,1" Width="32" Height="32" VerticalAlignment="Center"
             HorizontalAlignment="Center" Source="{TemplateBinding RibbonMenuItem.ImageSource}"
             RenderOptions.BitmapScalingMode="NearestNeighbor"/>
            <Border x:Name="CheckMarkBorder"
              Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
              BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
              BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
              Margin="1" Width="30" Height="30" CornerRadius="2">
                <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
              HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
              FlowDirection="LeftToRight" Data="{StaticResource ï}">
                    <UIElement.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                    </UIElement.RenderTransform>
                </Path>
            </Border>
            <RibbonButton x:Name="PART_HeaderButton" Grid.ColumnSpan="2" Style="{StaticResource ö}"
                           Command="{TemplateBinding MenuItem.Command}"
                           CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                           CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                           Content="{TemplateBinding HeaderedItemsControl.Header}"
                           ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                           ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                           ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                           SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                           Padding="{TemplateBinding Control.Padding}" HorizontalContentAlignment="Left"
                           Background="Transparent" Focusable="false"
                           ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                           ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                           ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                           ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                           ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                           ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                           KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                           QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                           CanAddToQuickAccessToolBarDirectly="true"/>
            <Border x:Name="HighlightRightBorder" Grid.Column="2" CornerRadius="0,2,2,0" HorizontalAlignment="Stretch"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}">
                <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                   Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                   ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                   IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
            </Border>
            <Border x:Name="HighlightRightBorderOverlay" Grid.Column="2" CornerRadius="0,2,2,0"
              HorizontalAlignment="Stretch" BorderBrush="Transparent" Background="Transparent"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
             Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="2"
                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                  Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                        <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                        <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                  KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                </Grid>
                            </ScrollViewer>
                            <Border x:Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                      BorderThickness="0,1,0,0"
                      BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="true">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CanAddToQuickAccessToolBarDirectly"
                        Value="false"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                        Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="û" TargetType="{x:Type RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid" Margin="1" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="22"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}"/>
            <Border x:Name="HighlightLeftBorderOverlay" Grid.ColumnSpan="2" CornerRadius="2,0,0,2"
              BorderBrush="Transparent" Background="Transparent"/>
            <Image x:Name="Image" Margin="4,3,6,1" Width="32" Height="32" VerticalAlignment="Center"
             HorizontalAlignment="Center" Source="{TemplateBinding RibbonMenuItem.ImageSource}"
             RenderOptions.BitmapScalingMode="NearestNeighbor"/>
            <Border x:Name="CheckMarkBorder"
              Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
              BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
              BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
              Margin="1" Width="30" Height="30" CornerRadius="2">
                <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
              HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
              FlowDirection="LeftToRight" Data="{StaticResource ï}">
                    <UIElement.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                    </UIElement.RenderTransform>
                </Path>
            </Border>
            <RibbonToggleButton x:Name="PART_HeaderButton" Grid.ColumnSpan="2" Style="{StaticResource ù}"
                                 Command="{TemplateBinding MenuItem.Command}"
                                 CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                                 CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                                 Content="{TemplateBinding HeaderedItemsControl.Header}"
                                 ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                 ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                 SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                                 Padding="{TemplateBinding Control.Padding}" HorizontalContentAlignment="Left"
                                 Background="Transparent" Focusable="false"
                                 ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                                 ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                                 ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                                 ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                                 ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                                 ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                                 KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                                 QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                                 CanAddToQuickAccessToolBarDirectly="true"/>
            <Border x:Name="HighlightRightBorder" Grid.Column="2" CornerRadius="0,2,2,0" HorizontalAlignment="Stretch"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}">
                <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                   Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                   ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                   IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
            </Border>
            <Border x:Name="HighlightRightBorderOverlay" Grid.Column="2" CornerRadius="0,2,2,0"
              HorizontalAlignment="Stretch" BorderBrush="Transparent" Background="Transparent"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
             Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="2"
                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                  Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                        <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                        <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                  KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                </Grid>
                            </ScrollViewer>
                            <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                      BorderThickness="0,1,0,0"
                      BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="true">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                <Setter TargetName="PART_HeaderButton"
                        Property="RibbonToggleButton.CanAddToQuickAccessToolBarDirectly" Value="false"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                        Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ü" TargetType="{x:Type RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid" Margin="1" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="4"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="37"/>
                <ColumnDefinition Width="17"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder" CornerRadius="2,0,0,2" Grid.ColumnSpan="4"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}"/>
            <Border x:Name="HighlightLeftBorderOverlay" CornerRadius="2,0,0,2" Grid.ColumnSpan="4"
              BorderBrush="Transparent" Background="Transparent"/>
            <Image x:Name="Image" Margin="1" Width="16" Height="16"
             Source="{TemplateBinding RibbonMenuItem.ImageSource}" VerticalAlignment="Center"
             HorizontalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
            <Border x:Name="CheckMarkBorder"
              Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
              BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
              BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
              Margin="1" Width="20" Height="20" CornerRadius="2">
                <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
              HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
              FlowDirection="LeftToRight" Data="{StaticResource ï}"/>
            </Border>
            <RibbonButton x:Name="PART_HeaderButton" Grid.ColumnSpan="4" Style="{StaticResource ö}"
                           Command="{TemplateBinding MenuItem.Command}"
                           CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                           CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                           Content="{TemplateBinding HeaderedItemsControl.Header}"
                           ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                           ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                           ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                           SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                           Padding="{TemplateBinding Control.Padding}" HorizontalContentAlignment="Left"
                           Background="Transparent" Focusable="false"
                           ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                           ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                           ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                           ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                           ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                           ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                           KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                           QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                           CanAddToQuickAccessToolBarDirectly="true"/>
            <Border x:Name="HighlightRightBorder" Grid.Column="4" CornerRadius="0,2,2,0" HorizontalAlignment="Stretch"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}">
                <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                   Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                   ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                   IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
            </Border>
            <Border x:Name="HighlightRightBorderOverlay" Grid.Column="4" CornerRadius="0,2,2,0"
              HorizontalAlignment="Stretch" BorderBrush="Transparent" Background="Transparent"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
             Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="2"
                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                  Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                        <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                        <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                  KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                </Grid>
                            </ScrollViewer>
                            <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                      BorderThickness="0,1,0,0"
                      BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="true">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                <Setter TargetName="PART_HeaderButton" Property="RibbonButton.CanAddToQuickAccessToolBarDirectly"
                        Value="false"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                        Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ý" TargetType="{x:Type RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid" Margin="1" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="4"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="37"/>
                <ColumnDefinition Width="17"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder" CornerRadius="2,0,0,2" Grid.ColumnSpan="4"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}"/>
            <Border x:Name="HighlightLeftBorderOverlay" CornerRadius="2,0,0,2" Grid.ColumnSpan="4"
              BorderBrush="Transparent" Background="Transparent"/>
            <Image x:Name="Image" Margin="1" Width="16" Height="16"
             Source="{TemplateBinding RibbonMenuItem.ImageSource}" VerticalAlignment="Center"
             HorizontalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
            <Border x:Name="CheckMarkBorder"
              Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
              BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
              BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
              Margin="1" Width="20" Height="20" CornerRadius="2">
                <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
              HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
              FlowDirection="LeftToRight" Data="{StaticResource ï}"/>
            </Border>
            <RibbonToggleButton x:Name="PART_HeaderButton" Grid.ColumnSpan="4" Style="{StaticResource ù}"
                                 Command="{TemplateBinding MenuItem.Command}"
                                 CommandParameter="{TemplateBinding MenuItem.CommandParameter}"
                                 CommandTarget="{TemplateBinding MenuItem.CommandTarget}"
                                 Content="{TemplateBinding HeaderedItemsControl.Header}"
                                 ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                 ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                 SmallImageSource="{TemplateBinding RibbonMenuItem.ImageSource}"
                                 Padding="{TemplateBinding Control.Padding}" HorizontalContentAlignment="Left"
                                 Background="Transparent" Focusable="false"
                                 ToolTipTitle="{TemplateBinding RibbonMenuItem.ToolTipTitle}"
                                 ToolTipDescription="{TemplateBinding RibbonMenuItem.ToolTipDescription}"
                                 ToolTipImageSource="{TemplateBinding RibbonMenuItem.ToolTipImageSource}"
                                 ToolTipFooterTitle="{TemplateBinding RibbonMenuItem.ToolTipFooterTitle}"
                                 ToolTipFooterDescription="{TemplateBinding RibbonMenuItem.ToolTipFooterDescription}"
                                 ToolTipFooterImageSource="{TemplateBinding RibbonMenuItem.ToolTipFooterImageSource}"
                                 KeyTip="{TemplateBinding RibbonSplitMenuItem.HeaderKeyTip}"
                                 QuickAccessToolBarId="{TemplateBinding RibbonSplitMenuItem.HeaderQuickAccessToolBarId}"
                                 CanAddToQuickAccessToolBarDirectly="true"/>
            <Border x:Name="HighlightRightBorder" Grid.Column="4" CornerRadius="0,2,2,0" HorizontalAlignment="Stretch"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              Background="{TemplateBinding Control.Background}">
                <RibbonToggleButton x:Name="PART_ArrowToggleButton" Visibility="Collapsed" Focusable="false"
                                   Style="{StaticResource ÷}" BorderThickness="1,0,0,0" Background="Transparent"
                                   ToolTipTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding RibbonSplitMenuItem.DropDownToolTipFooterImageSource}"
                                   IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
            </Border>
            <Border x:Name="HighlightRightBorderOverlay" Grid.Column="4" CornerRadius="0,2,2,0"
              HorizontalAlignment="Stretch" BorderBrush="Transparent" Background="Transparent"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
             Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             SnapsToDevicePixels="true"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled">
                    <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="2"
                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                  Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                                        <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                               Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                                        <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                               Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                               Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                  KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                </Grid>
                            </ScrollViewer>
                            <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                      BorderThickness="0,1,0,0"
                      BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="InnerOverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="true">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="RibbonSplitMenuItem.HeaderQuickAccessToolBarId">
                <Setter TargetName="PART_HeaderButton"
                        Property="RibbonToggleButton.CanAddToQuickAccessToolBarDirectly" Value="false"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                    <Condition SourceName="PART_HeaderButton" Property="UIElement.IsMouseOver" Value="false"/>
                    <Condition SourceName="PART_ArrowToggleButton" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Value="{StaticResource ë}"
                        Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="PART_ArrowToggleButton" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_ArrowToggleButton" Value="{StaticResource Ë}"
                        Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="PART_HeaderButton" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
                <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="HighlightLeftBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="HighlightRightBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1"/>
                <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RibbonApplicationSplitMenuItem}">
        <Setter Property="Control.HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Padding" Value="3,2,3,2"/>
        <Setter Property="RibbonMenuItem.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonMenuItem.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonMenuItem.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonMenuItem.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonMenuItem.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonControlService.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonControlService.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.IsEnabled" Value="false"/>
        <Setter Property="Control.Template" Value="{StaticResource õ}"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonApplicationSplitMenuItem.Level" Value="Top"/>
                    <Condition Property="MenuItem.IsCheckable" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Template" Value="{StaticResource ø}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonApplicationSplitMenuItem.Level" Value="Middle"/>
                    <Condition Property="MenuItem.IsCheckable" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Template" Value="{StaticResource ú}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonApplicationSplitMenuItem.Level" Value="Middle"/>
                    <Condition Property="MenuItem.IsCheckable" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Template" Value="{StaticResource û}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonApplicationSplitMenuItem.Level" Value="Sub"/>
                    <Condition Property="MenuItem.IsCheckable" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Template" Value="{StaticResource ü}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonApplicationSplitMenuItem.Level" Value="Sub"/>
                    <Condition Property="MenuItem.IsCheckable" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Template" Value="{StaticResource ý}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ÿ" TargetType="{x:Type TextBox}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" Background="Transparent">
                        <ContentControl.ContentTemplate>
                            <DataTemplate>
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect" Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                               Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                               Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Ribbon}}, Path=Background}"/>
                                        <Rectangle x:Name="OverlayRect" Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                               Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                               Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonComboBox}}, Path=Background}"/>
                                    </Canvas>
                                    <ContentPresenter Content="{Binding}"/>
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Value="false"
                                       Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}, Path=(ScrollViewer.CanContentScroll)}">
                                        <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                                    Property="Canvas.Top"/>
                                        <Setter TargetName="OpaqueRect"
                                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                    Property="Canvas.Left"/>
                                        <Setter TargetName="OverlayRect"
                                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                                        <Setter TargetName="OverlayRect"
                                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                                    Property="Canvas.Left"/>
                                    </DataTrigger>
                                    <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                        <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ContentControl.ContentTemplate>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="Ā" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#E4F0FE" Offset="0"/>
        <GradientStop Color="#E4F0FE" Offset="0.49"/>
        <GradientStop Color="#CFDFF3" Offset="0.5"/>
        <GradientStop Color="#E8F1FD" Offset="1.0"/>
    </LinearGradientBrush>
    <Style x:Key="ā" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="RibbonToggleButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonToggleButton.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonToggleButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonToggleButton.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonToggleButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="OuterBorder" Grid.Column="1" Width="14"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                            <Border Name="InnerBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="1"
                      SnapsToDevicePixels="true">
                                <Path Name="Arrow" Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource Ð}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ă" TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="RibbonToggleButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonToggleButton.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonToggleButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonToggleButton.CheckedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.CheckedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}"/>
        <Setter Property="RibbonToggleButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonToggleButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Border Name="OuterBorder" Width="14" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <Border Name="InnerBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="1"
                    SnapsToDevicePixels="true">
                            <Path Name="Arrow" Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource Ð}"
                    HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
                            <Setter TargetName="Arrow"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Shape.Fill"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder"
                              Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="Ą" TargetType="{x:Type RibbonComboBox}">
        <Border x:Name="MainBorder">
            <Grid Margin="1,0,1,0" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition x:Name="OuterTextColumn" Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Image x:Name="Image" Source="{TemplateBinding RibbonMenuButton.LargeImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
               HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
               Grid.Column="1" Margin="1" Width="32" Height="32"/>
                <Grid Name="Grid" Row="1" Column="1" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition x:Name="TextColumn" Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="TwoLineTextPanel" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonMenuButton.Label}"
                                      TextAlignment="Center" LineHeight="13px" LineStackingStrategy="BlockLineHeight" Margin="2,0,2,0"/>
                        <Rectangle x:Name="FocusVisual" Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2"
                       Visibility="Collapsed"/>
                    </Grid>
                    <Border x:Name="Border" Grid.Column="1" Grid.ColumnSpan="2"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}" Height="{StaticResource ą}"/>
                    <Grid Column="1" Height="{StaticResource ą}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBox Name="PART_EditableTextBox"
                     Width="{TemplateBinding RibbonComboBox.SelectionBoxWidth}"
                     Margin="{TemplateBinding Control.Padding}" Style="{StaticResource ÿ}"
                     IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <RibbonToggleButton Name="PART_ToggleButton" Grid.Column="1"
                                       BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                                       BorderBrush="Transparent" Style="{StaticResource ă}"
                                       CheckedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                       CheckedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                       PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                       PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                       IsTabStop="false"
                                       IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                </Grid>
                <Popup Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
               Placement="Bottom" Focusable="false"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               PlacementTarget="{Binding ElementName=Border}"
               IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                    <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                          KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled"
                                          FrameworkElement.MinWidth="{Binding ElementName=Border, Path=ActualWidth}">
                        <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2"
                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                            <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <ItemsPresenter x:Name="ItemsPresenter" Grid.Row="1" Grid.IsSharedSizeScope="true" Margin="1"
                                  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                          BorderThickness="0,1,0,0"
                          BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                        <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                    </Border>
                                </Grid>
                            </Border>
                        </Border>
                    </classic:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Value="True"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}">
                <Setter TargetName="TextColumn" Property="ColumnDefinition.Width" Value="*"/>
                <Setter TargetName="OuterTextColumn" Property="ColumnDefinition.Width" Value="*"/>
                <Setter TargetName="PART_EditableTextBox" Property="FrameworkElement.Width" Value="Auto"/>
                <Setter TargetName="Grid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
            </DataTrigger>
            <DataTrigger Value="Large"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                <Setter Property="FrameworkElement.Height" Value="66"/>
                <Setter TargetName="Image" Property="FrameworkElement.Height" Value="32"/>
                <Setter TargetName="Image" Property="FrameworkElement.Width" Value="32"/>
                <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
                <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
            </DataTrigger>
            <DataTrigger Value="Small"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
                <Setter TargetName="Image"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                        Property="Image.Source"/>
                <Setter TargetName="Image" Property="FrameworkElement.Height" Value="16"/>
                <Setter TargetName="Image" Property="FrameworkElement.Width" Value="16"/>
                <Setter TargetName="Image" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
                <Setter TargetName="Image" Property="FrameworkElement.Margin" Value="2,0,1,0"/>
                <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="2,0,1,0"/>
                <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="false"/>
                <Setter TargetName="Image" Property="Grid.Column" Value="0"/>
                <Setter TargetName="Image" Property="Grid.Row" Value="1"/>
            </DataTrigger>
            <DataTrigger Value="Collapsed"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Value="False"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
                <Setter TargetName="TwoLineTextPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="PART_ToggleButton" Value="{StaticResource Ā}" Property="Control.Background"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                    <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                    <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                        Property="Border.Background"/>
                <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="PART_ToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBorderBrush}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="PART_ToggleButton"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBackground}"
                        Property="Control.Background"/>
            </MultiDataTrigger>
            <Trigger Property="RibbonComboBox.ShowKeyboardCues" Value="true">
                <Setter TargetName="FocusVisual" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                <Setter TargetName="Border" Value="{StaticResource ć}" Property="Border.Background"/>
                <Setter TargetName="Border" Value="{StaticResource Ĉ}" Property="Border.BorderBrush"/>
                <Setter TargetName="MainBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="RibbonMenuButton.IsInControlGroup" Value="true">
                <Setter TargetName="MainBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MainBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
                <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0"/>
                <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                <Setter Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                        Property="Control.Background"/>
                <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="FocusVisual"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Shape.Stroke"/>
                <Setter TargetName="MainBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                    <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="PART_ToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Control.Background"/>
                <Setter TargetName="PART_ToggleButton"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.Foreground"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RibbonComboBox}">
        <Style.Resources>
            <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="UIElement.Focusable" Value="false"/>
                <Setter Property="Control.BorderBrush"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}"/>
                <Setter Property="Control.Background"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}"/>
                <Setter Property="Control.FontWeight" Value="Bold"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border x:Name="MainBorder" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                                <Border x:Name="Overlay" Background="{StaticResource ì}">
                                    <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="Text"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="TextBlock.Foreground"/>
                                    <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                  Property="Border.Background"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="14"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="SideBarBorder" BorderThickness="0,0,1,0" Margin="0,-1,0,-1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                                            <Border x:Name="SideBarOverlay" Background="{StaticResource ì}"/>
                                        </Border>
                                        <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" Margin="2,0,0,0" X1="0" Y1="0" X2="1" Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                            <Setter TargetName="SideBarBorder" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="SideBarBorder"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Border.BorderBrush"/>
                                            <Setter TargetName="SideBarOverlay" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="Line"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Shape.Stroke"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Control.Background" Value="{StaticResource ĉ}"/>
        <Setter Property="Control.BorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="2,1,2,1"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="RibbonComboBox.SelectionBoxWidth" Value="80"/>
        <Setter Property="RibbonMenuButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="RibbonMenuButton.MouseOverBackground" Value="#FF333333"/>
        <Setter Property="RibbonMenuButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="RibbonMenuButton.FocusedBackground" Value="#FFFF7100"/>
        <Setter Property="RibbonMenuButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonMenuButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="RibbonMenuButton.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonComboBox}">
                    <Border x:Name="MainBorder">
                        <Grid Margin="1,0,1,0" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition x:Name="OuterTextColumn" Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Image x:Name="Image" Source="{TemplateBinding RibbonMenuButton.LargeImageSource}"
                     RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                     HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                     Grid.Column="1" Margin="1" Width="32" Height="32"/>
                            <Grid Name="Grid" Row="1" Column="1" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition x:Name="TextColumn" Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="TwoLineTextPanel" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonMenuButton.Label}"
                                            TextAlignment="Center" LineHeight="13px" LineStackingStrategy="BlockLineHeight" Margin="2,0,2,0"/>
                                    <Rectangle x:Name="FocusVisual" Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2"
                             Visibility="Collapsed"/>
                                </Grid>
                                <Border x:Name="Border" Grid.Column="1" Grid.ColumnSpan="2"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Height="{StaticResource ą}"/>
                                <Grid Column="1" Height="{StaticResource ą}" IsSharedSizeScope="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid IsHitTestVisible="false" Margin="{TemplateBinding Control.Padding}"
                        Width="{TemplateBinding RibbonComboBox.SelectionBoxWidth}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                                        <ContentPresenter Name="PART_ContentHost" Content="{TemplateBinding RibbonComboBox.SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding RibbonComboBox.SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding RibbonComboBox.SelectionBoxItemTemplateSelector}"
                                      ContentStringFormat="{TemplateBinding RibbonComboBox.SelectionBoxItemStringFormat}"
                                      Margin="2,0,2,0"/>
                                    </Grid>
                                    <RibbonToggleButton Name="PART_ToggleButton" Grid.ColumnSpan="2"
                                             BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                                             BorderBrush="Transparent" Style="{StaticResource ā}"
                                             CheckedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                             CheckedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                             PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                             PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                             IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Grid>
                            <Popup Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
                     Placement="Bottom" Focusable="false"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     PlacementTarget="{Binding ElementName=Border}"
                     IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                                KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled"
                                                FrameworkElement.MinWidth="{Binding ElementName=Border, Path=ActualWidth}">
                                    <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                          CornerRadius="2"
                          BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                          Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                                        <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <ItemsPresenter x:Name="ItemsPresenter" Grid.Row="1" Grid.IsSharedSizeScope="true" Margin="1"
                                        KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"
                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                                BorderThickness="0,1,0,0"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                                </Border>
                                            </Grid>
                                        </Border>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}">
                            <Setter TargetName="TextColumn" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="OuterTextColumn" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="PART_ContentHost" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="PART_ContentHost" Property="FrameworkElement.HorizontalAlignment"
                              Value="Stretch"/>
                            <Setter TargetName="Grid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                        </DataTrigger>
                        <DataTrigger Value="Large"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Property="FrameworkElement.MinWidth" Value="44"/>
                            <Setter Property="FrameworkElement.Height" Value="66"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Height" Value="32"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Width" Value="32"/>
                            <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
                            <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
                        </DataTrigger>
                        <DataTrigger Value="Small"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
                            <Setter TargetName="Image"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                              Property="Image.Source"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Height" Value="16"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Width" Value="16"/>
                            <Setter TargetName="Image" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
                            <Setter TargetName="Image" Property="FrameworkElement.Margin" Value="2,0,1,0"/>
                            <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="2,0,1,0"/>
                            <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="false"/>
                            <Setter TargetName="Image" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Image" Property="Grid.Row" Value="1"/>
                        </DataTrigger>
                        <DataTrigger Value="Collapsed"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Value="False"
                                 Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
                            <Setter TargetName="TwoLineTextPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="PART_ToggleButton"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                              Property="Control.BorderBrush"/>
                            <Setter TargetName="PART_ToggleButton" Value="{StaticResource Ā}" Property="Control.Background"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>
                                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                              Property="Border.Background"/>
                            <Setter TargetName="Border"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <Trigger Property="RibbonComboBox.ShowKeyboardCues" Value="true">
                            <Setter TargetName="FocusVisual" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
                            <Setter TargetName="Border" Value="{StaticResource ć}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{StaticResource Ĉ}" Property="Border.BorderBrush"/>
                            <Setter TargetName="MainBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="RibbonMenuButton.IsInControlGroup" Value="true">
                            <Setter TargetName="MainBorder"
                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MainBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
                            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                              Property="FrameworkElement.Style"/>
                        </MultiTrigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="MenuBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="ResizeControl"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                              Property="Control.Background"/>
                            <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
                            <Setter TargetName="Border"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="FocusVisual"
                              Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                              Property="Shape.Stroke"/>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                              Property="Border.BorderBrush"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                              Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
                <Setter Property="ToolTipService.IsEnabled" Value="false"/>
            </Trigger>
            <Trigger Property="RibbonComboBox.IsEditable" Value="true">
                <Setter Property="Control.Template" Value="{StaticResource Ą}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type RibbonContextMenu}">
        <Style.Resources>
            <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="UIElement.Focusable" Value="false"/>
                <Setter Property="Control.BorderBrush"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonContextMenu}}, Path=PlacementTarget.(RibbonControlService.Ribbon).BorderBrush}"/>
                <Setter Property="Control.Background"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonContextMenu}}, Path=PlacementTarget.(RibbonControlService.Ribbon).Background}"/>
                <Setter Property="Control.FontWeight" Value="Bold"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border x:Name="MainBorder" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                                <Border x:Name="Overlay" Background="{StaticResource ì}">
                                    <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="Text"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="TextBlock.Foreground"/>
                                    <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                  Property="Border.Background"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="14"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="SideBarBorder" BorderThickness="0,0,1,0" Margin="0,-1,0,-1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                                            <Border x:Name="SideBarOverlay" Background="{StaticResource ì}"/>
                                        </Border>
                                        <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" Margin="2,0,0,0" X1="0" Y1="0" X2="1" Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                            <Setter TargetName="SideBarBorder"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Border.BorderBrush"/>
                                            <Setter TargetName="SideBarBorder" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="SideBarOverlay" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="Line"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Shape.Stroke"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonContextMenu}">
                    <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent" UIElement.SnapsToDevicePixels="true"
                                          RenderOptions.ClearTypeHint="Enabled">
                        <Border Name="PART_ResizeBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2"
                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PlacementTarget.(RibbonControlService.Ribbon).BorderBrush}"
                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PlacementTarget.(RibbonControlService.Ribbon).Background}">
                            <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" BorderThickness="0"
                      CornerRadius="2">
                                <ScrollViewer x:Name="SubMenuScrollViewer" Margin="1"
                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=PART_ResizeBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=PART_ResizeBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=PART_ResizeBorder, Path=Background}"/>
                                            <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Border>
                    </classic:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                            <Setter TargetName="OverlayRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                              Property="Canvas.Top"/>
                            <Setter TargetName="OverlayRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                              Property="Canvas.Left"/>
                        </Trigger>
                        <Trigger Property="RibbonContextMenu.HasGallery" Value="true">
                            <Setter TargetName="SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                              Value="Disabled"/>
                            <Setter TargetName="SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                              Value="Disabled"/>
                        </Trigger>
                        <Trigger Property="ContextMenu.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                              Property="classic:SystemDropShadowChrome.Color"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                            <Setter TargetName="SubMenuScrollViewer"
                              Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                              Property="Control.Foreground"/>
                            <Setter TargetName="PART_ResizeBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush"/>
                            <Setter TargetName="PART_ResizeBorder"
                              Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                              Property="Border.Background"/>
                            <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="×" TargetType="{x:Type RibbonMenuButton}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <RibbonToggleButton x:Name="PART_ToggleButton" Template="{StaticResource Ħ}"
                                 RibbonTwoLineText.PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                                 Label="{TemplateBinding RibbonMenuButton.Label}"
                                 LargeImageSource="{TemplateBinding RibbonMenuButton.LargeImageSource}"
                                 SmallImageSource="{TemplateBinding RibbonMenuButton.SmallImageSource}"
                                 ControlSizeDefinition="{TemplateBinding RibbonMenuButton.ControlSizeDefinition}"
                                 BorderBrush="{TemplateBinding Control.BorderBrush}"
                                 BorderThickness="{TemplateBinding Control.BorderThickness}"
                                 Background="{TemplateBinding Control.Background}" CornerRadius="2"
                                 MouseOverBorderBrush="{TemplateBinding RibbonMenuButton.MouseOverBorderBrush}"
                                 MouseOverBackground="{TemplateBinding RibbonMenuButton.MouseOverBackground}"
                                 CheckedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                 CheckedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                 FocusedBorderBrush="{TemplateBinding RibbonMenuButton.FocusedBorderBrush}"
                                 FocusedBackground="{TemplateBinding RibbonMenuButton.FocusedBackground}"
                                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                 Padding="{TemplateBinding Control.Padding}" ClickMode="Press" Style="{x:Null}"
                                 FocusVisualStyle="{x:Null}"
                                 IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}">
                <FrameworkElement.Resources>
                    <Thickness Left="1" Top="1" Right="1" Bottom="2"
                             x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}"/>
                </FrameworkElement.Resources>
            </RibbonToggleButton>
            <Popup x:Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
             Placement="Bottom" Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}">
                <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                        KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled">
                    <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="2"
                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                  Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                        <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" BorderThickness="0"
                    CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer" Grid.Row="1" Margin="1"
                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=MenuBorder, Path=Background}"/>
                                            <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                                    </Grid>
                                </ScrollViewer>
                                <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                        BorderThickness="0,1,0,0"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                                </Border>
                            </Grid>
                        </Border>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}">
                <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Height" Value="Auto"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="RibbonMenuButton.HasGallery" Value="true">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
                <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
                <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0"/>
                <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true"/>
                    <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                        Property="FrameworkElement.Style"/>
            </MultiTrigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="PART_ToggleButton" Value="{x:Null}" Property="RibbonTwoLineText.PathData"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
                <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                <Setter TargetName="PART_SubMenuScrollViewer"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Control.Foreground"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="MenuBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="MenuBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
                <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent"/>
                <Setter TargetName="SubMenuInnerBorder" Property="Border.CornerRadius" Value="0"/>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type RibbonMenuButton}">
        <Style.Resources>
            <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="UIElement.Focusable" Value="false"/>
                <Setter Property="Control.BorderBrush"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}"/>
                <Setter Property="Control.Background"
                        Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}"/>
                <Setter Property="Control.FontWeight" Value="Bold"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border x:Name="MainBorder" SnapsToDevicePixels="true" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                                <Border x:Name="Overlay" Background="{StaticResource ì}">
                                    <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                    <Setter TargetName="Text"
                                  Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                  Property="TextBlock.Foreground"/>
                                    <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                  Property="Border.BorderBrush"/>
                                    <Setter TargetName="MainBorder"
                                  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                  Property="Border.Background"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="14"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="SideBarBorder" BorderThickness="0,0,1,0" Margin="0,-1,0,-1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                                            <Border x:Name="SideBarOverlay" Background="{StaticResource ì}"/>
                                        </Border>
                                        <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" Margin="2,0,0,0" X1="0" Y1="0" X2="1" Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                                            <Setter TargetName="SideBarBorder" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="SideBarBorder"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Border.BorderBrush"/>
                                            <Setter TargetName="SideBarOverlay" Property="Border.Background" Value="Transparent"/>
                                            <Setter TargetName="Line"
                                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                      Property="Shape.Stroke"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="2,0,2,0"/>
        <Setter Property="RibbonMenuButton.MouseOverBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
        <Setter Property="RibbonMenuButton.MouseOverBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}"/>
        <Setter Property="RibbonMenuButton.PressedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}"/>
        <Setter Property="RibbonMenuButton.PressedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}"/>
        <Setter Property="RibbonMenuButton.FocusedBorderBrush"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
        <Setter Property="RibbonMenuButton.FocusedBackground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}"/>
        <Setter Property="RibbonTwoLineText.PathData" Value="{StaticResource Ð}"/>
        <Setter Property="RibbonMenuButton.QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template" Value="{StaticResource ×}"/>
        <Style.Triggers>
            <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
                <Setter Property="ToolTipService.IsEnabled" Value="false"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type vk:ThemeRibbonWindow}">
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="MinWidth" Value="142"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="5" CaptionHeight="24" CornerRadius="5" GlassFrameThickness="1" UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="ClientBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#DD000000" Offset="0"/>
                    <GradientStop Color="#DD333333" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type vk:ThemeRibbonWindow}">
                    <Grid ClipToBounds="True">
                        <Grid x:Name="WindowFrame" SnapsToDevicePixels="true" UseLayoutRounding="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <Border BorderBrush="{StaticResource NormalBorderBrush}" Background="{StaticResource NormalBrush}" BorderThickness="1,1,1,0" CornerRadius="4.5,4.5,0,0" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                <Border CornerRadius="4,4,0,0" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                            <GradientStop Color="#26FFFFFF" Offset="0" />
                                            <GradientStop Color="#26FFFFFF" Offset="0.447" />
                                            <GradientStop Color="#00FFFFFF" Offset="0.455" />
                                            <GradientStop Color="#00FFFFFF" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Grid Height="28">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Canvas Margin="3" Height="{Binding ElementName=TitlePanel, Path=ActualHeight}" VerticalAlignment="Center">
                                            <Grid x:Name="TitlePanel" Width="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Image Source="{TemplateBinding Icon}" MaxWidth="16" MaxHeight="16" Margin="3"/>
                                            </Grid>
                                        </Canvas>
                                        <StackPanel Grid.Column="1" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
                                            <Button x:Name="MinimizeButton" Focusable="False" Style="{StaticResource ThemeWindowButton}">
                                                <Button.Command>
                                                    <vkm:MinimizeWindowCommand/>
                                                </Button.Command>
                                                <Border x:Name="MinimizeButtonContent" Width="10" Height="10">
                                                    <Rectangle Width="10" Height="2" Fill="{StaticResource TextBrush}" VerticalAlignment="Bottom"/>
                                                </Border>
                                            </Button>
                                            <Button x:Name="MaximizeButton" Focusable="False" Style="{StaticResource ThemeWindowButton}">
                                                <Button.Command>
                                                    <vkm:ToggleMaximizeWindowCommand/>
                                                </Button.Command>
                                                <Grid x:Name="MaximizeButtonContent" Width="12" Height="12">
                                                    <Border x:Name="MaximizeWindowIcon" Width="12" Height="10" BorderThickness="1,3,1,1" BorderBrush="{StaticResource TextBrush}"/>
                                                    <Grid x:Name="NormalWindowIcon" Visibility="Collapsed" Width="12" Height="10">
                                                        <Rectangle Width="10" Height="8" Stroke="{StaticResource TextBrush}" StrokeThickness="1" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                                                        <Path Width="10" Height="8" Stroke="{StaticResource TextBrush}" StrokeThickness="1" HorizontalAlignment="Right" VerticalAlignment="Top" Data="F1 M 0.5,2.5L 0.5,0.5L 9.5,0.5L 9.5,7.5L 7.5,7.5"/>
                                                    </Grid>
                                                </Grid>
                                            </Button>
                                            <Button x:Name="CloseButton" Foreground="#80FF0000" Focusable="False" Style="{StaticResource ThemeWindowButton}" Template="{StaticResource ThemeWindowCloseButtonTemplate}">
                                                <Button.Command>
                                                    <vkm:CloseWindowCommand/>
                                                </Button.Command>
                                                <Path x:Name="CloseButtonContent" Margin="1" Stretch="Fill" Width="10" Height="10" Fill="{StaticResource TextBrush}" Data="F1 M 6,4.64204L 2.35797,1L 1,2.35797L 4.64203,6L 1,9.64203L 2.35796,11L 6,7.35796L 9.64204,11L 11,9.64203L 7.35797,6L 11,2.35796L 9.64204,1L 6,4.64204 Z "/>
                                            </Button>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                            </Border>

                            <Border Grid.Row="1" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,4.5,4.5" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                <Border BorderThickness="3,0,3,3" CornerRadius="0,0,2.5,2.5" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{StaticResource MainColor}" />
                                    </Border.BorderBrush>
                                    <Border BorderBrush="{StaticResource NormalBorderBrush}" Background="{TemplateBinding ClientBackground}" BorderThickness="1" CornerRadius="0,0,0.5,0.5" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                        <Border Margin="0,-28,0,0">
                                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="2" />
                                        </Border>
                                    </Border>
                                </Border>
                            </Border>

                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="WindowFrame" Property="Margin" Value="-4,-1,-4,-4"/>
                            <Setter TargetName="CloseButton" Property="Width" Value="47"/>
                            <Setter TargetName="CloseButton" Property="Padding" Value="0,0,3,0"/>
                            <Setter TargetName="MaximizeWindowIcon" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="NormalWindowIcon" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MinimizeButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <!--<Setter TargetName="TitlePanel" Property="Opacity" Value="0.6"/>-->
                            <Setter TargetName="MinimizeButtonContent" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="MaximizeButtonContent" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="CloseButtonContent" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    
    
    
    
</ResourceDictionary>